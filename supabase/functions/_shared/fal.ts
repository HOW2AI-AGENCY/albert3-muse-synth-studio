/**
 * @fileoverview Fal.AI API Client for Audio Understanding
 * @description
 * –ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Fal.AI Audio Understanding API.
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –ø–µ—Å–µ–Ω –∏ AI-–∞–Ω–∞–ª–∏–∑ –∞—É–¥–∏–æ —á–µ—Ä–µ–∑ queue-based —Å–∏—Å—Ç–µ–º—É.
 * 
 * @see https://fal.ai/models/fal-ai/audio-understanding
 * @see https://fal.ai/models/fal-ai/audio-understanding/api
 * 
 * @module fal
 * @version 1.0.0
 * @since 2025-10-31
 * 
 * @example
 * ```typescript
 * const client = createFalClient({ apiKey: FAL_API_KEY });
 * const result = await client.analyzeAudio({
 *   audioUrl: 'https://example.com/audio.mp3',
 *   prompt: 'Extract song title, artist, genre, mood, BPM, instruments'
 * });
 * ```
 */

import { logger } from "./logger.ts";

// ============================================================================
// TYPES
// ============================================================================

/**
 * –°—Ç–∞—Ç—É—Å—ã –∑–∞–¥–∞—á–∏ –≤ –æ—á–µ—Ä–µ–¥–∏ Fal.AI
 */
export type FalQueueStatus = 'IN_QUEUE' | 'IN_PROGRESS' | 'COMPLETED';

/**
 * Payload –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∞—É–¥–∏–æ —á–µ—Ä–µ–∑ Fal.AI
 */
export interface FalAudioAnalysisPayload {
  /** URL –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ */
  audio_url: string;
  /** –ü—Ä–æ–º–ø—Ç —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏ –¥–ª—è AI */
  prompt: string;
  /** –ó–∞–ø—Ä–æ—Å–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) */
  detailed_analysis?: boolean;
}

/**
 * –û—Ç–≤–µ—Ç API –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∑–∞–¥–∞—á–∏
 */
export interface FalQueueResponse {
  /** –°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ */
  status: FalQueueStatus;
  /** ID –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è */
  request_id: string;
  /** URL –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ */
  response_url?: string;
  /** URL –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ */
  status_url?: string;
  /** URL –¥–ª—è –æ—Ç–º–µ–Ω—ã –∑–∞–¥–∞—á–∏ */
  cancel_url?: string;
  /** –õ–æ–≥–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è */
  logs?: Array<{ message: string; timestamp: number }>;
  /** –ú–µ—Ç—Ä–∏–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è */
  metrics?: Record<string, unknown>;
  /** –ü–æ–∑–∏—Ü–∏—è –≤ –æ—á–µ—Ä–µ–¥–∏ */
  queue_position?: number;
}

/**
 * –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –∞—É–¥–∏–æ
 */
export interface FalAudioAnalysisResult {
  /** AI-–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∞–Ω–∞–ª–∏–∑–∞ */
  output: string;
}

/**
 * –ö–∞—Å—Ç–æ–º–Ω–∞—è –æ—à–∏–±–∫–∞ Fal.AI API
 */
export class FalApiError extends Error {
  constructor(
    message: string,
    public statusCode?: number,
    public responseBody?: string
  ) {
    super(message);
    this.name = 'FalApiError';
  }
}

/**
 * –û–ø—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è Fal.AI –∫–ª–∏–µ–Ω—Ç–∞
 */
export interface CreateFalClientOptions {
  /** API –∫–ª—é—á Fal.AI (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ) */
  apiKey: string;
  /** –ë–∞–∑–æ–≤—ã–π URL API (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: https://queue.fal.run) */
  baseUrl?: string;
  /** –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 30000) */
  timeout?: number;
  /** –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–æ–≤ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 3) */
  retryAttempts?: number;
}

// ============================================================================
// CLIENT FACTORY
// ============================================================================

/**
 * –°–æ–∑–¥–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å Fal.AI Audio Understanding API
 * 
 * @param {CreateFalClientOptions} options - –û–ø—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞
 * @returns {Object} –ö–ª–∏–µ–Ω—Ç —Å –º–µ—Ç–æ–¥–∞–º–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Fal.AI API
 * 
 * @example
 * ```typescript
 * const client = createFalClient({
 *   apiKey: process.env.FAL_API_KEY,
 *   timeout: 60000
 * });
 * 
 * // –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞
 * const task = await client.startAnalysis({
 *   audio_url: 'https://example.com/track.mp3',
 *   prompt: 'Extract: title, artist, genre, mood, BPM'
 * });
 * 
 * // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
 * const status = await client.checkStatus(task.request_id);
 * 
 * // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
 * if (status.status === 'COMPLETED') {
 *   const result = await client.getResult(task.request_id);
 *   console.log(result.output);
 * }
 * ```
 */
export function createFalClient(options: CreateFalClientOptions) {
  const BASE_URL = options.baseUrl || "https://queue.fal.run";
  const TIMEOUT = options.timeout || 30000;
  const MAX_RETRIES = options.retryAttempts || 3;
  
  const headers = {
    "Authorization": `Key ${options.apiKey}`,
    "Content-Type": "application/json",
  };

  /**
   * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è HTTP-–∑–∞–ø—Ä–æ—Å–æ–≤ —Å retry-–ª–æ–≥–∏–∫–æ–π
   */
  async function makeRequest<T>(
    endpoint: string,
    method: 'GET' | 'POST' | 'PUT' = 'POST',
    body?: Record<string, unknown>
  ): Promise<T> {
    const url = `${BASE_URL}${endpoint}`;
    let lastError: Error | null = null;
    
    for (let attempt = 1; attempt <= MAX_RETRIES; attempt++) {
      try {
        const controller = new AbortController();
        const timeoutId = setTimeout(() => controller.abort(), TIMEOUT);
        
        logger.debug(`üîµ [FAL-REQUEST] Attempt ${attempt}/${MAX_RETRIES}`, {
          endpoint,
          method,
          hasBody: !!body
        });
        
        const response = await fetch(url, {
          method,
          headers,
          body: body ? JSON.stringify(body) : undefined,
          signal: controller.signal,
        });
        
        clearTimeout(timeoutId);
        
        logger.debug(`üîµ [FAL-RESPONSE] Status ${response.status}`, {
          endpoint,
          statusText: response.statusText
        });
        
        if (!response.ok) {
          const errorBody = await response.text();
          
          logger.error(`‚ùå [FAL-ERROR] Request failed`, {
            endpoint,
            status: response.status,
            errorPreview: errorBody.slice(0, 500)
          });
          
          throw new FalApiError(
            `Fal.AI API error (${response.status}): ${errorBody}`,
            response.status,
            errorBody
          );
        }
        
        const result = await response.json();
        
        logger.debug(`‚úÖ [FAL] Request successful`, {
          endpoint,
          attempt,
          statusCode: response.status
        });
        
        return result as T;
      } catch (error) {
        lastError = error as Error;
        
        const is429 = error instanceof FalApiError && error.statusCode === 429;
        
        logger.warn(`‚ö†Ô∏è [FAL] Attempt ${attempt}/${MAX_RETRIES} failed`, {
          error: lastError.message,
          endpoint,
          is429RateLimit: is429,
          willRetry: attempt < MAX_RETRIES
        });
        
        if (attempt < MAX_RETRIES) {
          const backoffMs = is429 
            ? (2000 * Math.pow(2, attempt - 1)) + Math.random() * 1000
            : (1000 * Math.pow(2, attempt - 1));
          
          logger.info(`‚è≥ [FAL] Waiting ${Math.round(backoffMs)}ms before retry...`);
          await new Promise(resolve => setTimeout(resolve, backoffMs));
        } else if (is429) {
          throw new FalApiError(
            'Fal.AI API rate limit exceeded. Please wait before retrying.',
            429,
            lastError.message
          );
        }
      }
    }
    
    logger.error(`üî¥ [FAL] All retry attempts failed`, {
      endpoint,
      error: lastError?.message
    });
    
    throw lastError || new Error('Fal.AI request failed after all retries');
  }

  return {
    /**
     * –ó–∞–ø—É—Å–∫–∞–µ—Ç –∑–∞–¥–∞—á—É –∞–Ω–∞–ª–∏–∑–∞ –∞—É–¥–∏–æ
     * 
     * @param {FalAudioAnalysisPayload} payload - –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–Ω–∞–ª–∏–∑–∞
     * @returns {Promise<FalQueueResponse>} –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–¥–∞—á–µ
     * 
     * @example
     * ```typescript
     * const task = await client.startAnalysis({
     *   audio_url: 'https://example.com/audio.mp3',
     *   prompt: 'Extract song metadata: title, artist, genre, mood, BPM, instruments',
     *   detailed_analysis: true
     * });
     * console.log('Request ID:', task.request_id);
     * ```
     */
    async startAnalysis(payload: FalAudioAnalysisPayload): Promise<FalQueueResponse> {
      logger.info('[FAL] üöÄ Starting audio analysis', {
        audioUrl: payload.audio_url.substring(0, 100),
        promptLength: payload.prompt.length,
        detailedAnalysis: payload.detailed_analysis ?? false
      });

      return await makeRequest<FalQueueResponse>(
        '/fal-ai/audio-understanding',
        'POST',
        {
          audio_url: payload.audio_url,
          prompt: payload.prompt,
          detailed_analysis: payload.detailed_analysis ?? false
        }
      );
    },

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏
     * 
     * @param {string} requestId - ID –∑–∞–ø—Ä–æ—Å–∞
     * @param {boolean} includeLogs - –í–∫–ª—é—á–∏—Ç—å –ª–æ–≥–∏ –≤ –æ—Ç–≤–µ—Ç
     * @returns {Promise<FalQueueResponse>} –°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏
     * 
     * @example
     * ```typescript
     * const status = await client.checkStatus('abc123', true);
     * console.log('Status:', status.status);
     * if (status.logs) {
     *   status.logs.forEach(log => console.log(log.message));
     * }
     * ```
     */
    async checkStatus(requestId: string, includeLogs = false): Promise<FalQueueResponse> {
      logger.debug('[FAL] üîç Checking task status', { requestId, includeLogs });

      const endpoint = `/fal-ai/audio-understanding/requests/${requestId}/status${includeLogs ? '?logs=1' : ''}`;
      return await makeRequest<FalQueueResponse>(endpoint, 'GET');
    },

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏
     * 
     * @param {string} requestId - ID –∑–∞–ø—Ä–æ—Å–∞
     * @returns {Promise<FalAudioAnalysisResult>} –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞
     * 
     * @example
     * ```typescript
     * const result = await client.getResult('abc123');
     * console.log('AI Output:', result.output);
     * ```
     */
    async getResult(requestId: string): Promise<FalAudioAnalysisResult> {
      logger.info('[FAL] üì• Fetching result', { requestId });

      const endpoint = `/fal-ai/audio-understanding/requests/${requestId}`;
      return await makeRequest<FalAudioAnalysisResult>(endpoint, 'GET');
    },

    /**
     * –û—Ç–º–µ–Ω—è–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
     * 
     * @param {string} requestId - ID –∑–∞–ø—Ä–æ—Å–∞
     * @returns {Promise<{ success: boolean }>} –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–º–µ–Ω—ã
     * 
     * @example
     * ```typescript
     * const cancelled = await client.cancelTask('abc123');
     * console.log('Cancelled:', cancelled.success);
     * ```
     */
    async cancelTask(requestId: string): Promise<{ success: boolean }> {
      logger.info('[FAL] ‚ùå Cancelling task', { requestId });

      const endpoint = `/fal-ai/audio-understanding/requests/${requestId}/cancel`;
      return await makeRequest<{ success: boolean }>(endpoint, 'PUT');
    }
  };
}
