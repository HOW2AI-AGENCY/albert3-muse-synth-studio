/**
 * Generation Service - –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º—É–∑—ã–∫–∏
 * 
 * –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑—É–µ—Ç –≤—Å—é –ª–æ–≥–∏–∫—É –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º—É–∑—ã–∫–∏, –≤–∫–ª—é—á–∞—è:
 * - –í–∞–ª–∏–¥–∞—Ü–∏—é –∑–∞–ø—Ä–æ—Å–æ–≤
 * - –°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–µ–∫–æ–≤ –≤ –ë–î
 * - –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—é –∫ –Ω—É–∂–Ω–æ–º—É –ø—Ä–æ–≤–∞–π–¥–µ—Ä—É
 * - –û–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫
 * - Real-time –ø–æ–¥–ø–∏—Å–∫–∏
 * 
 * @module GenerationService
 */

import { supabase } from '@/integrations/supabase/client';
import { logger } from '@/utils/logger';
import { performanceMonitor } from '@/utils/performanceMonitor';
import type { RealtimeChannel } from '@supabase/supabase-js';

// Re-export unified MusicProvider type
export type { MusicProvider } from '@/config/provider-models';

// ============= Types =============

export interface GenerationRequest {
  // Basic params
  title?: string;
  prompt: string;
  provider: import('@/config/provider-models').MusicProvider;
  
  // Music params
  lyrics?: string;
  styleTags?: string[];
  hasVocals?: boolean;
  makeInstrumental?: boolean;
  
  // Advanced params
  modelVersion?: string;
  negativeTags?: string;
  vocalGender?: 'm' | 'f' | 'any';
  
  // Audio reference
  referenceAudioUrl?: string;
  referenceTrackId?: string;
  audioWeight?: number;
  
  // Weights & constraints
  styleWeight?: number;
  lyricsWeight?: number;
  weirdnessConstraint?: number;
  
  // Optional
  customMode?: boolean;
  isBGM?: boolean;
  idempotencyKey?: string;
  
  // ‚úÖ Force new generation (skip cache)
  forceNew?: boolean;
}

export interface GenerationResult {
  success: boolean;
  trackId: string;
  taskId: string;
  provider: import('@/config/provider-models').MusicProvider;
  message?: string;
}

export interface GenerationError {
  code: 'VALIDATION_ERROR' | 'AUTH_ERROR' | 'PROVIDER_ERROR' | 'DB_ERROR' | 'NETWORK_ERROR' | 'UNKNOWN_ERROR';
  message: string;
  details?: unknown;
}

// ============= Constants =============

const MIN_PROMPT_LENGTH = 3;
const MAX_PROMPT_LENGTH = 500;
const MAX_LYRICS_LENGTH = 3000;
const REQUEST_CACHE_SIZE = 10; // Cache last 10 requests
const REQUEST_CACHE_TTL = 30 * 60 * 1000; // 30 minutes

// ============= Request Cache =============

interface CachedRequest {
  hash: string;
  trackId: string;
  timestamp: number;
}

const requestCache = new Map<string, CachedRequest>();

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ö–µ—à–∞ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏
 * ‚úÖ UTF-8 safe: –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∫–∏—Ä–∏–ª–ª–∏—Ü—É –∏ –ª—é–±—ã–µ Unicode —Å–∏–º–≤–æ–ª—ã
 */
function generateRequestHash(request: GenerationRequest): string {
  const { prompt, lyrics, styleTags, provider, hasVocals, modelVersion } = request;
  const normalized = JSON.stringify({
    prompt: prompt.trim().toLowerCase(),
    lyrics: lyrics?.trim().toLowerCase() || '',
    tags: [...(styleTags || [])].sort().join(','),
    provider,
    hasVocals: hasVocals ?? true,
    model: modelVersion || 'default',
  });
  
  // ‚úÖ UTF-8 –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ (–ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–∏—Ä–∏–ª–ª–∏—Ü—ã)
  try {
    const utf8Bytes = new TextEncoder().encode(normalized);
    const binaryString = Array.from(utf8Bytes, byte => String.fromCharCode(byte)).join('');
    return btoa(binaryString).substring(0, 32);
  } catch (error) {
    // Fallback: –ø—Ä–æ—Å—Ç–æ–π —Ö–µ—à –µ—Å–ª–∏ btoa –≤—Å—ë —Ä–∞–≤–Ω–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
    logger.warn('Hash generation fallback', 'GenerationService', { error });
    return `${normalized.length}_${normalized.substring(0, 16).replace(/[^a-zA-Z0-9]/g, '')}`;
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
 */
function checkDuplicateRequest(request: GenerationRequest): string | null {
  // ‚úÖ Skip cache if forceNew flag is set
  if (request.forceNew) {
    logger.info('Skipping duplicate check - forceNew flag enabled', 'GenerationService');
    return null;
  }
  
  const hash = generateRequestHash(request);
  const cached = requestCache.get(hash);
  
  if (cached && Date.now() - cached.timestamp < REQUEST_CACHE_TTL) {
    logger.info('Duplicate request detected', 'GenerationService', { 
      hash, 
      cachedTrackId: cached.trackId,
      age: Math.floor((Date.now() - cached.timestamp) / 1000),
    });
    return cached.trackId;
  }
  
  return null;
}

/**
 * –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
 */
function cacheRequest(request: GenerationRequest, trackId: string): void {
  const hash = generateRequestHash(request);
  requestCache.set(hash, { hash, trackId, timestamp: Date.now() });
  
  // –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π
  if (requestCache.size > REQUEST_CACHE_SIZE) {
    const sortedEntries = Array.from(requestCache.entries())
      .sort((a, b) => a[1].timestamp - b[1].timestamp);
    requestCache.delete(sortedEntries[0][0]);
  }
}

// ============= Validation =============

/**
 * –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
 */
function validateGenerationRequest(request: GenerationRequest): GenerationError | null {
  const { prompt, lyrics, provider } = request;

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–º–ø—Ç–∞
  if (!prompt || prompt.trim().length < MIN_PROMPT_LENGTH) {
    return {
      code: 'VALIDATION_ERROR',
      message: `–û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º ${MIN_PROMPT_LENGTH} —Å–∏–º–≤–æ–ª–∞`,
    };
  }

  if (prompt.length > MAX_PROMPT_LENGTH) {
    return {
      code: 'VALIDATION_ERROR',
      message: `–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å ${MAX_PROMPT_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤`,
    };
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏—Ä–∏–∫–∏
  if (lyrics && lyrics.length > MAX_LYRICS_LENGTH) {
    return {
      code: 'VALIDATION_ERROR',
      message: `–¢–µ–∫—Å—Ç –ø–µ—Å–Ω–∏ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å ${MAX_LYRICS_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤`,
    };
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
  if (!['suno', 'mureka'].includes(provider)) {
    return {
      code: 'VALIDATION_ERROR',
      message: `–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä: ${provider}`,
    };
  }

  return null;
}

// ============= Database Operations =============

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ —Ç—Ä–µ–∫–∞ –≤ –ë–î
 */
async function createTrackRecord(
  userId: string,
  request: GenerationRequest
): Promise<string> {
  const { title, prompt, provider, lyrics, styleTags, hasVocals } = request;

  const effectiveTitle = title?.trim() || 'Untitled Track';

  try {
    const { data, error } = await supabase
      .from('tracks')
      .insert({
        user_id: userId,
        title: effectiveTitle,
        prompt: prompt.trim(),
        lyrics: lyrics?.trim() || null,
        style_tags: styleTags || null,
        has_vocals: hasVocals ?? true,
        provider: provider,
        status: 'pending',
      })
      .select('id')
      .single();

    if (error) {
      logger.error('Failed to create track record', error, 'GenerationService', {
        userId,
        provider,
      });
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å —Ç—Ä–µ–∫–∞');
    }

    if (!data?.id) {
      throw new Error('Track ID not returned from database');
    }

    logger.info('Track record created', 'GenerationService', {
      trackId: data.id,
      userId,
      provider,
    });

    return data.id;
  } catch (error) {
    logger.error('Database error during track creation', error instanceof Error ? error : new Error(String(error)), 'GenerationService');
    throw error;
  }
}

// ============= Real-time Subscriptions =============

type StatusUpdateHandler = (status: 'completed' | 'failed', trackData?: {
  title: string;
  errorMessage?: string;
}) => void;

/**
 * –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Ç—Ä–µ–∫–∞
 */
function subscribeToTrackUpdates(
  trackId: string,
  onUpdate: StatusUpdateHandler
): RealtimeChannel {
  const subscription = supabase
    .channel(`track-status:${trackId}`)
    .on('postgres_changes', {
      event: 'UPDATE',
      schema: 'public',
      table: 'tracks',
      filter: `id=eq.${trackId}`,
    }, (payload) => {
      const track = payload.new as {
        status: string;
        title: string;
        error_message?: string;
      };

      if (track.status === 'completed' || track.status === 'failed') {
        onUpdate(track.status, {
          title: track.title,
          errorMessage: track.error_message,
        });
      }
    })
    .subscribe();

  logger.debug('Subscribed to track updates', 'GenerationService', { trackId });
  return subscription;
}

// ============= Main Service =============

/**
 * –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å GenerationService
 */
export class GenerationService {
  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º—É–∑—ã–∫–∏ —Å –ø–æ–ª–Ω—ã–º —Ü–∏–∫–ª–æ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏
   */
  static async generate(request: GenerationRequest): Promise<GenerationResult> {
    // ‚úÖ Generate Correlation ID for end-to-end tracing
    const correlationId = crypto.randomUUID();
    const context = 'GenerationService.generate';
    
    logger.info('üéµ [GENERATION START] Starting music generation', context, {
      correlationId,
      provider: request.provider,
      prompt: request.prompt.substring(0, 50) + '...',
      promptLength: request.prompt.length,
      hasLyrics: !!request.lyrics,
      lyricsLength: request.lyrics?.length || 0,
      customMode: request.customMode,
      styleTags: request.styleTags,
      modelVersion: request.modelVersion,
      isCyrillic: /[–ê-–Ø–∞-—è–Å—ë]/.test(request.prompt),
    });

    // 1. –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞
    logger.debug('[STEP 1] Validating request...', context);
    const validationError = validateGenerationRequest(request);
    if (validationError) {
      logger.error('[STEP 1 FAILED] Validation failed', new Error(validationError.message), context, {
        errorCode: validationError.code,
        errorMessage: validationError.message,
        promptLength: request.prompt.length,
        lyricsLength: request.lyrics?.length || 0,
      });
      throw new Error(validationError.message);
    }
    logger.info('[STEP 1 ‚úì] Validation passed', context);

    // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    logger.debug('[STEP 2] Checking authentication...', context);
    const { data: { user }, error: authError } = await supabase.auth.getUser();
    if (authError || !user) {
      logger.error('[STEP 2 FAILED] Authentication failed', authError || new Error('No user'), context, {
        hasAuthError: !!authError,
        hasUser: !!user,
      });
      throw new Error('–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è');
    }
    logger.info('[STEP 2 ‚úì] User authenticated', context, { userId: user.id });

    // 3. ‚úÖ SECURITY: –ü—Ä–æ–≤–µ—Ä–∫–∞ rate limiting
    logger.debug('[STEP 3] Checking rate limit...', context);
    try {
      const { generationRateLimiter } = await import('@/middleware/rateLimiter');
      const rateLimitResult = await generationRateLimiter.check();
      
      if (!rateLimitResult.allowed) {
        const waitTime = Math.ceil((rateLimitResult.resetAt - Date.now()) / 1000);
        const errorMsg = `–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–¥–æ–∂–¥–∏—Ç–µ ${waitTime} —Å–µ–∫—É–Ω–¥.`;
        
        logger.warn('[STEP 3 FAILED] Rate limit exceeded', context, {
          userId: user.id,
          remaining: rateLimitResult.remaining,
          resetAt: new Date(rateLimitResult.resetAt).toISOString(),
          waitTime,
        });
        
        throw new Error(errorMsg);
      }
      
      logger.info('[STEP 3 ‚úì] Rate limit check passed', context, {
        remaining: rateLimitResult.remaining,
        resetAt: new Date(rateLimitResult.resetAt).toISOString(),
      });
    } catch (error) {
      if (error instanceof Error && error.message.includes('–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤')) {
        throw error;
      }
      // Rate limiter initialization failed, continue without it (log warning)
      logger.warn('[STEP 3] Rate limiter unavailable, continuing', context, { error });
    }

    // 4. ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    logger.debug('[STEP 4] Checking for duplicate requests...', context);
    const cachedId = checkDuplicateRequest(request);
    if (cachedId) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç—Ä–µ–∫ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à—ë–Ω
      const { data: cachedTrack } = await supabase
        .from('tracks')
        .select('status')
        .eq('id', cachedId)
        .maybeSingle();

      if (cachedTrack?.status === 'completed') {
        logger.info('‚ö° Returning cached COMPLETED track', context, { trackId: cachedId });
        return {
          success: true,
          trackId: cachedId,
          taskId: 'cached',
          provider: request.provider,
          message: '–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ä–∞–Ω–µ–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–π —Ç—Ä–µ–∫',
        };
      }

      logger.warn('Cached track is not completed. Ignoring cache and generating new', context, {
        trackId: cachedId,
        status: cachedTrack?.status || 'unknown',
      });
    }

    logger.info('[STEP 3 ‚úì] No duplicate found, proceeding with generation', context);

    try {
      // 4. –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ —Ç—Ä–µ–∫–∞
      logger.debug('[STEP 4] Creating track record in database...', context);
      const trackId = await createTrackRecord(user.id, request);
      logger.info('[STEP 4 ‚úì] Track record created', context, { trackId });

      // 5. ‚úÖ –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
      cacheRequest(request, trackId);

      // 6. ‚úÖ –ù–∞—á–∞—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
      const performanceId = `generation-${trackId}`;
      performanceMonitor.startTimer(performanceId, 'GenerationService');

      // 7. –í—ã–∑–æ–≤ Edge Function –Ω–∞–ø—Ä—è–º—É—é
      logger.info('[STEP 5] Invoking provider edge function', context, {
        correlationId,
        provider: request.provider,
        trackId,
      });

      const functionName = request.provider === 'suno' ? 'generate-suno' : 'generate-mureka';
      const { data: result, error: invokeError } = await supabase.functions.invoke(functionName, {
        body: { ...request, trackId, correlationId }
      });

      if (invokeError || !result) {
        throw new Error(invokeError?.message || 'Provider invocation failed');
      }
      
      logger.info('[STEP 5 ‚úì] Provider responded successfully', context, {
        correlationId,
        provider: request.provider,
        trackId,
        taskId: result.taskId,
      });

      // ‚úÖ –ó–∞–ø–∏—Å–∞—Ç—å –º–µ—Ç—Ä–∏–∫—É –≤—ã–∑–æ–≤–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
      performanceMonitor.endTimer(
        performanceId, 
        `generation.provider.${request.provider}`,
        'GenerationService',
        {
          trackId,
          hasLyrics: !!request.lyrics,
          customMode: request.customMode,
        }
      );

      logger.info('‚úÖ [GENERATION SUCCESS] All steps completed', context, {
        correlationId,
        provider: request.provider,
        trackId,
        taskId: result.taskId,
      });

      return {
        success: true,
        trackId,
        taskId: result.taskId,
        provider: request.provider,
        message: result.message,
      };

    } catch (error) {
      logger.error('‚ùå [GENERATION FAILED] Error occurred', error instanceof Error ? error : new Error(String(error)), context, {
        correlationId,
        provider: request.provider,
        errorName: error instanceof Error ? error.name : 'Unknown',
        errorMessage: error instanceof Error ? error.message : String(error),
        errorStack: error instanceof Error ? error.stack : undefined,
      });

      // Enhanced error handling with specific error types
      if (error instanceof Error) {
        const errorMessage = error.message.toLowerCase();
        
        // Network errors
        if (errorMessage.includes('failed to fetch') || errorMessage.includes('network')) {
          throw new Error('–ù–µ—Ç —Å–≤—è–∑–∏ —Å —Å–µ—Ä–≤–µ—Ä–æ–º. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.');
        }
        
        // Provider-specific errors
        if (errorMessage.includes('insufficient credits') || errorMessage.includes('no credits')) {
          throw new Error('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å.');
        }
        
        if (errorMessage.includes('invalid api key') || errorMessage.includes('unauthorized')) {
          throw new Error('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.');
        }
        
        if (errorMessage.includes('rate limit')) {
          throw new Error('–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
        
        if (errorMessage.includes('timeout')) {
          throw new Error('–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
        }
        
        // Re-throw original error if it's specific
        throw error;
      }

      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –º—É–∑—ã–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
    }
  }

  /**
   * –°–æ–∑–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Ç—Ä–µ–∫–∞
   */
  static subscribe(trackId: string, onUpdate: StatusUpdateHandler): RealtimeChannel {
    return subscribeToTrackUpdates(trackId, onUpdate);
  }

  /**
   * –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É
   */
  static unsubscribe(subscription: RealtimeChannel): void {
    subscription.unsubscribe();
    logger.debug('Unsubscribed from track updates', 'GenerationService');
  }
}
