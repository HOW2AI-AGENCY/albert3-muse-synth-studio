/**
 * @fileoverview Hook –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–Ω–æ–≥–æ –∞—É–¥–∏–æ —á–µ—Ä–µ–∑ Mureka AI
 * @description
 * –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å analyze-reference-audio edge function
 * –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –∏ –æ–ø–∏—Å–∞–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –∞—É–¥–∏–æ.
 * 
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç polling —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —á–µ—Ä–µ–∑ TanStack Query.
 * 
 * @module useReferenceAnalysis
 * @version 1.0.0
 * @since 2025-10-15
 * 
 * @example
 * ```typescript
 * const { analyzeAudio, isAnalyzing, recognition, description } = useReferenceAnalysis();
 * 
 * // –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑
 * await analyzeAudio({ audioUrl: 'https://...', trackId: '...' });
 * 
 * // recognition –∏ description –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ polling
 * if (recognition?.recognized_title) {
 *   console.log('–†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ:', recognition.recognized_title, recognition.recognized_artist);
 * }
 * ```
 */

import React from 'react';
import { useMutation, useQuery, useQueryClient } from '@tanstack/react-query';
import { supabase } from '@/integrations/supabase/client';
import { useToast } from '@/hooks/use-toast';
import { logger } from '@/utils/logger';
import type { Database } from '@/integrations/supabase/types';

// ============================================================================
// TYPES
// ============================================================================

/**
 * –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∞–Ω–∞–ª–∏–∑–∞
 */
export interface AnalyzeAudioParams {
  /** URL –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ */
  audioUrl: string;
  /** ID —Ç—Ä–µ–∫–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) */
  trackId?: string;
  /** ID —Ñ–∞–π–ª–∞ –≤ audio_library (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) */
  audioLibraryId?: string;
}

/**
 * –û—Ç–≤–µ—Ç –æ—Ç edge function analyze-reference-audio
 */
export interface AnalyzeAudioResponse {
  success: boolean;
  recognitionId?: string;
  descriptionId?: string;
  uploadedFileId: string;
}

// ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–∏–ø—ã –∏–∑ –ë–î
export type SongRecognition = Database['public']['Tables']['song_recognitions']['Row'];
export type SongDescription = Database['public']['Tables']['song_descriptions']['Row'];

/**
 * –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
 */
export interface ReferenceAnalysis {
  recognition: SongRecognition | null;
  description: SongDescription | null;
  isLoading: boolean;
  error: Error | null;
}

// ============================================================================
// MAIN HOOK
// ============================================================================

/**
 * Hook –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–Ω–æ–≥–æ –∞—É–¥–∏–æ
 * 
 * @returns –û–±—ä–µ–∫—Ç —Å —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∞–Ω–∞–ª–∏–∑–∞
 * 
 * @example
 * ```typescript
 * const {
 *   analyzeAudio,
 *   isAnalyzing,
 *   analysisResult,
 *   recognition,
 *   description,
 *   isPolling
 * } = useReferenceAnalysis();
 * 
 * // –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞
 * const result = await analyzeAudio({
 *   audioUrl: referenceAudioUrl,
 *   trackId: currentTrackId
 * });
 * 
 * // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π polling —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
 * // recognition –∏ description –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
 * ```
 */
export function useReferenceAnalysis() {
  const { toast } = useToast();
  const queryClient = useQueryClient();

  // ============================================================================
  // STATE: IDs —Ç–µ–∫—É—â–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
  // ============================================================================

  const [currentRecognitionId, setCurrentRecognitionId] = React.useState<string | null>(null);
  const [currentDescriptionId, setCurrentDescriptionId] = React.useState<string | null>(null);

  // ============================================================================
  // MUTATION: –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞
  // ============================================================================

  const {
    mutateAsync: analyzeAudio,
    isPending: isAnalyzing,
    data: analysisResult,
    error: analysisError
  } = useMutation<AnalyzeAudioResponse, Error, AnalyzeAudioParams>({
    mutationKey: ['analyzeReferenceAudio'],
    mutationFn: async (params: AnalyzeAudioParams) => {
      logger.info('üîç [ANALYZE] Starting reference audio analysis', 'useReferenceAnalysis', {
        audioUrl: params.audioUrl.substring(0, 100),
        trackId: params.trackId,
        audioLibraryId: params.audioLibraryId
      });

      // ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Å—Å–∏—é –ø–µ—Ä–µ–¥ –≤—ã–∑–æ–≤–æ–º
      const { data: { session }, error: sessionError } = await supabase.auth.getSession();
      
      if (sessionError || !session) {
        logger.error('[ANALYZE] No active session', sessionError || new Error('No session'), 'useReferenceAnalysis');
        throw new Error('–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∞—É–¥–∏–æ');
      }

      logger.info('üîê [ANALYZE] Session acquired', 'useReferenceAnalysis', {
        hasAccessToken: !!session.access_token,
        userId: session.user?.id.substring(0, 8)
      });

      // üîé PREFETCH: –ø–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —É–∂–µ –≥–æ—Ç–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ —ç—Ç–æ–º—É –∞—É–¥–∏–æ/—Ç—Ä–µ–∫—É
      try {
        const prefetchLogs: Record<string, unknown> = {};

        // –ù–∞–π—Ç–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: —Å–Ω–∞—á–∞–ª–∞ –ø–æ trackId, –∏–Ω–∞—á–µ –ø–æ audioUrl
        let latestDescription: SongDescription | null = null;
        if (params.trackId) {
          const { data: descByTrack } = await supabase
            .from('song_descriptions')
            .select('*')
            .eq('track_id', params.trackId)
            .order('created_at', { ascending: false })
            .limit(1)
            .maybeSingle();
          latestDescription = (descByTrack as SongDescription) || null;
        }
        if (!latestDescription) {
          const { data: descByUrl } = await supabase
            .from('song_descriptions')
            .select('*')
            .eq('audio_file_url', params.audioUrl)
            .order('created_at', { ascending: false })
            .limit(1)
            .maybeSingle();
          latestDescription = (descByUrl as SongDescription) || null;
        }

        // –ù–∞–π—Ç–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –ø–æ audioUrl
        const { data: recogByUrl } = await supabase
          .from('song_recognitions')
          .select('*')
          .eq('audio_file_url', params.audioUrl)
          .order('created_at', { ascending: false })
          .limit(1)
          .maybeSingle();
        const latestRecognition = (recogByUrl as SongRecognition) || null;

        prefetchLogs['hasDescription'] = !!latestDescription;
        prefetchLogs['hasRecognition'] = !!latestRecognition;
        prefetchLogs['descStatus'] = latestDescription?.status;
        prefetchLogs['recStatus'] = latestRecognition?.status;

        // –ï—Å–ª–∏ –µ—Å—Ç—å –≥–æ—Ç–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö –∏ –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ–º Edge Function
        const descReady = latestDescription && latestDescription.status === 'completed';
        const recReady = latestRecognition && latestRecognition.status === 'completed';

        if (descReady || recReady) {
          logger.info('‚ôªÔ∏è [ANALYZE] Using cached analysis results', 'useReferenceAnalysis', prefetchLogs);
          return {
            success: true,
            recognitionId: recReady ? latestRecognition!.id : undefined,
            descriptionId: descReady ? latestDescription!.id : undefined,
            uploadedFileId: 'existing',
          } as AnalyzeAudioResponse;
        }
      } catch (prefetchErr) {
        logger.warn('[ANALYZE] Prefetch check failed, fallback to edge function', 'useReferenceAnalysis', {
          error: String(prefetchErr)
        });
      }

      // ‚ñ∂Ô∏è –ù–µ –Ω–∞—à–ª–∏ –≥–æ—Ç–æ–≤—ã—Ö ‚Äî –≤—ã–∑—ã–≤–∞–µ–º edge function
      const { data, error } = await supabase.functions.invoke('analyze-reference-audio', {
        body: params,
        headers: {
          Authorization: `Bearer ${session.access_token}`
        }
      });

      if (error) {
        logger.error('[ANALYZE] Edge function error', error, 'useReferenceAnalysis');
        throw error;
      }

      if (!data?.success) {
        throw new Error('Analysis failed');
      }

      logger.info('‚úÖ [ANALYZE] Analysis initiated', 'useReferenceAnalysis', {
        recognitionId: data.recognitionId?.substring(0, 8),
        descriptionId: data.descriptionId?.substring(0, 8),
        uploadedFileId: data.uploadedFileId
      });

      return data;
    },
    onSuccess: (data) => {
      // ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º IDs –¥–ª—è polling
      if (data.recognitionId) {
        setCurrentRecognitionId(data.recognitionId);
      }
      if (data.descriptionId) {
        setCurrentDescriptionId(data.descriptionId);
      }

      toast({
        title: 'üîç –ê–Ω–∞–ª–∏–∑ –∑–∞–ø—É—â–µ–Ω',
        description: '–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –∞—É–¥–∏–æ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ...',
        duration: 3000,
      });

      // ‚úÖ –ó–∞–ø—É—Å–∫ polling queries
      queryClient.invalidateQueries({ queryKey: ['songRecognition'] });
      queryClient.invalidateQueries({ queryKey: ['songDescription'] });
    },
    onError: (error) => {
      logger.error('[ANALYZE] Analysis failed', error, 'useReferenceAnalysis');
      
      toast({
        title: '‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞',
        description: error.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∞—É–¥–∏–æ',
        variant: 'destructive',
      });
    }
  });

  // ============================================================================
  // QUERY: Polling Recognition —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
  // ============================================================================

  const {
    data: recognition,
    isLoading: isLoadingRecognition,
    error: recognitionError
  } = useQuery<SongRecognition | null, Error>({
    queryKey: ['songRecognition', currentRecognitionId],
    queryFn: async () => {
      if (!currentRecognitionId) return null;

      const { data, error } = await supabase
        .from('song_recognitions')
        .select('*')
        .eq('id', currentRecognitionId)
        .maybeSingle();

      if (error) throw error;
      return data;
    },
    enabled: !!currentRecognitionId,
    // ‚úÖ Polling –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥ –ø–æ–∫–∞ —Å—Ç–∞—Ç—É—Å –Ω–µ 'completed' –∏–ª–∏ 'failed'
    refetchInterval: (query) => {
      const data = query.state.data;
      if (!data) return false;
      if (data.status === 'completed' || data.status === 'failed') {
        return false; // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º polling
      }
      return 5000; // 5 —Å–µ–∫—É–Ω–¥
    },
    refetchIntervalInBackground: true,
  });

  // ============================================================================
  // QUERY: Polling Description —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
  // ============================================================================

  const {
    data: description,
    isLoading: isLoadingDescription,
    error: descriptionError
  } = useQuery<SongDescription | null, Error>({
    queryKey: ['songDescription', currentDescriptionId],
    queryFn: async () => {
      if (!currentDescriptionId) return null;

      const { data, error } = await supabase
        .from('song_descriptions')
        .select('*')
        .eq('id', currentDescriptionId)
        .maybeSingle();

      if (error) throw error;
      return data;
    },
    enabled: !!currentDescriptionId,
    // ‚úÖ Polling –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥ –ø–æ–∫–∞ —Å—Ç–∞—Ç—É—Å –Ω–µ 'completed' –∏–ª–∏ 'failed'
    refetchInterval: (query) => {
      const data = query.state.data;
      if (!data) return false;
      if (data.status === 'completed' || data.status === 'failed') {
        return false; // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º polling
      }
      return 5000; // 5 —Å–µ–∫—É–Ω–¥
    },
    refetchIntervalInBackground: true,
  });

  // ============================================================================
  // EFFECTS: Toast notifications –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
  // ============================================================================

  React.useEffect(() => {
    if (recognition?.status === 'completed' && recognition.recognized_title) {
      toast({
        title: '‚úÖ –ü–µ—Å–Ω—è —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞',
        description: `"${recognition.recognized_title}" - ${recognition.recognized_artist}`,
        duration: 5000,
      });

      logger.info('‚úÖ [ANALYZE] Recognition completed', 'useReferenceAnalysis', {
        title: recognition.recognized_title,
        artist: recognition.recognized_artist,
        confidence: recognition.confidence_score,
        lyricsLines: typeof (recognition as any).metadata?.lyrics_text === 'string'
          ? ((recognition as any).metadata.lyrics_text as string).split('\n').filter(Boolean).length
          : undefined,
      });
    }

    if (recognition?.status === 'failed') {
      toast({
        title: '‚ö†Ô∏è –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å',
        description: recognition.error_message || '–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –ø–µ—Å–Ω—é',
        variant: 'destructive',
      });
    }
  }, [recognition?.status, toast]);

  React.useEffect(() => {
    if (description?.status === 'completed' && description.detected_genre) {
      toast({
        title: '‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–æ',
        description: `${description.detected_genre} ¬∑ ${description.detected_mood}${description.tempo_bpm ? ` ¬∑ ${description.tempo_bpm} BPM` : ''}`,
        duration: 5000,
      });

      logger.info('‚úÖ [ANALYZE] Description completed', 'useReferenceAnalysis', {
        genre: description.detected_genre,
        mood: description.detected_mood,
        tempo: description.tempo_bpm
      });
    }

    if (description?.status === 'failed') {
      toast({
        title: '‚ö†Ô∏è –û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å',
        description: description.error_message || '–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∞—É–¥–∏–æ',
        variant: 'destructive',
      });
    }
  }, [description?.status, toast]);

  // ============================================================================
  // RUNTIME LOGGING: –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Å—Ç–∞–¥–∏–∏
  // ============================================================================

  React.useEffect(() => {
    if (!recognition) return;
    if (recognition.status === 'pending' || recognition.status === 'processing') {
      logger.info('‚è≥ [ANALYZE] Recognition in progress', 'useReferenceAnalysis', {
        id: recognition.id.substring(0, 8),
        status: recognition.status,
      });
    }
  }, [recognition?.status]);

  React.useEffect(() => {
    if (!description) return;
    if (description.status === 'pending' || description.status === 'processing') {
      logger.info('‚è≥ [ANALYZE] Description in progress', 'useReferenceAnalysis', {
        id: description.id.substring(0, 8),
        status: description.status,
      });
    }
  }, [description?.status]);

  // ============================================================================
  // DERIVED STATE
  // ============================================================================

  const isPolling = (
    (recognition?.status === 'pending' || recognition?.status === 'processing') ||
    (description?.status === 'pending' || description?.status === 'processing')
  );

  const isCompleted = (
    recognition?.status === 'completed' && 
    description?.status === 'completed'
  );

  const hasFailed = (
    recognition?.status === 'failed' || 
    description?.status === 'failed'
  );

  // ============================================================================
  // RETURN
  // ============================================================================
  return {
    // ‚úÖ –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞
    analyzeAudio,
    isAnalyzing,
    analysisResult,
    analysisError,

    // ‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
    recognition,
    isLoadingRecognition,
    recognitionError,

    // ‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø–∏—Å–∞–Ω–∏—è
    description,
    isLoadingDescription,
    descriptionError,

    // ‚úÖ –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    isPolling,
    isCompleted,
    hasFailed,

    // ‚úÖ –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä—É—á–Ω–æ–≥–æ —Å–±—Ä–æ—Å–∞
    reset: () => {
      setCurrentRecognitionId(null);
      setCurrentDescriptionId(null);
    },

    // ‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ —É–∂–µ –∏–º–µ—é—â–∏—Ö—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –±–µ–∑ –∑–∞–ø—É—Å–∫–∞ –∞–Ω–∞–ª–∏–∑–∞
    loadPrevious: async (params: AnalyzeAudioParams) => {
      try {
        logger.info('üîé [ANALYZE] Checking for existing results', 'useReferenceAnalysis', {
          audioUrl: params.audioUrl.substring(0, 100),
          trackId: params.trackId
        });

        let latestDescription: SongDescription | null = null;
        if (params.trackId) {
          const { data: descByTrack } = await supabase
            .from('song_descriptions')
            .select('*')
            .eq('track_id', params.trackId)
            .order('created_at', { ascending: false })
            .limit(1)
            .maybeSingle();
          latestDescription = (descByTrack as SongDescription) || null;
        }
        if (!latestDescription) {
          const { data: descByUrl } = await supabase
            .from('song_descriptions')
            .select('*')
            .eq('audio_file_url', params.audioUrl)
            .order('created_at', { ascending: false })
            .limit(1)
            .maybeSingle();
          latestDescription = (descByUrl as SongDescription) || null;
        }

        const { data: recogByUrl } = await supabase
          .from('song_recognitions')
          .select('*')
          .eq('audio_file_url', params.audioUrl)
          .order('created_at', { ascending: false })
          .limit(1)
          .maybeSingle();
        const latestRecognition = (recogByUrl as SongRecognition) || null;

        const descReady = latestDescription && latestDescription.status === 'completed';
        const recReady = latestRecognition && latestRecognition.status === 'completed';

        if (descReady || recReady) {
          if (recReady) setCurrentRecognitionId(latestRecognition!.id);
          if (descReady) setCurrentDescriptionId(latestDescription!.id);
          queryClient.invalidateQueries({ queryKey: ['songRecognition'] });
          queryClient.invalidateQueries({ queryKey: ['songDescription'] });

          logger.info('‚úÖ [ANALYZE] Loaded existing analysis', 'useReferenceAnalysis', {
            recognitionId: recReady ? latestRecognition!.id.substring(0, 8) : undefined,
            descriptionId: descReady ? latestDescription!.id.substring(0, 8) : undefined,
          });
          return true;
        }

        logger.info('‚ÑπÔ∏è [ANALYZE] No existing analysis found', 'useReferenceAnalysis');
        return false;
      } catch (err) {
        logger.warn('[ANALYZE] loadPrevious failed', 'useReferenceAnalysis', { error: String(err) });
        return false;
      }
    }
  };
}

