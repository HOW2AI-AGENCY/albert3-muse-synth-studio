/**
 * Hook for manually synchronizing track status with provider
 * Allows users to recover tracks that completed but didn't update in UI
 */

import { useMutation, useQueryClient } from '@tanstack/react-query';
import { supabase } from '@/integrations/supabase/client';
import { toast } from 'sonner';
import { logger } from '@/utils/logger';
import * as Sentry from '@sentry/react';

interface ManualSyncParams {
  trackId: string;
}

interface ManualSyncResponse {
  success: boolean;
  action: string;
  message: string;
}

export const useManualSyncTrack = () => {
  const queryClient = useQueryClient();

  return useMutation({
    mutationFn: async ({ trackId }: ManualSyncParams) => {
      logger.info('üîÑ Manual sync requested', undefined, { trackId });

      toast.loading('–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–º...', {
        id: `sync-${trackId}`,
      });

      // ‚úÖ FIX: Check if track is stuck without task_id
      const { data: trackData } = await supabase
        .from('tracks')
        .select('id, status, created_at, mureka_task_id, provider')
        .eq('id', trackId)
        .single();

      if (trackData) {
        const ageMinutes = (Date.now() - new Date(trackData.created_at).getTime()) / (1000 * 60);
        const taskId = trackData.mureka_task_id;

        // ‚úÖ If no task_id and older than 3 minutes ‚Üí mark as failed
        if (!taskId && ageMinutes > 3 && (trackData.status === 'pending' || trackData.status === 'processing')) {
          logger.warn('Track stuck without task_id, marking as failed', undefined, { trackId, ageMinutes });
          
          await supabase
            .from('tracks')
            .update({
              status: 'failed',
              error_message: '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å (–Ω–µ—Ç task_id). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.',
            })
            .eq('id', trackId);

          toast.dismiss(`sync-${trackId}`);
          
          return {
            success: true,
            action: 'marked_failed',
            message: '–¢—Ä–µ–∫ –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –Ω–µ—É–¥–∞—á–Ω—ã–π. –ù–∞–∂–º–∏—Ç–µ "–ü–æ–≤—Ç–æ—Ä–∏—Ç—å" –¥–ª—è –Ω–æ–≤–æ–π –ø–æ–ø—ã—Ç–∫–∏.',
          };
        }
      }

      const { data, error } = await supabase.functions.invoke<ManualSyncResponse>(
        'check-stuck-tracks',
        {
          body: {
            trackIds: [trackId]
          }
        }
      );

      toast.dismiss(`sync-${trackId}`);

      if (error) {
        logger.error('Manual sync failed', error instanceof Error ? error : new Error(String(error)));
        throw new Error(error.message || '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç—Ä–µ–∫');
      }

      if (!data?.success) {
        throw new Error('–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å');
      }

      logger.info('Manual sync completed', undefined, { trackId, action: data.action });

      return data;
    },

    onSuccess: (data) => {
      // Invalidate tracks queries to refresh the list
      queryClient.invalidateQueries({ queryKey: ['tracks'] });

      if (data.action === 'synced_completed') {
        toast.success('‚úÖ –¢—Ä–µ–∫ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!', {
          description: '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞',
        });
      } else if (data.action === 'marked_failed') {
        toast.error('–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å', {
          description: data.message || '–ü—Ä–æ–≤–∞–π–¥–µ—Ä —Å–æ–æ–±—â–∏–ª –æ–± –æ—à–∏–±–∫–µ',
        });
      } else if (data.action === 'still_processing') {
        toast.info('–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ', {
          description: '–¢—Ä–µ–∫ –µ—â—ë —Å–æ–∑–¥–∞—ë—Ç—Å—è, –ø–æ–¥–æ–∂–¥–∏—Ç–µ',
        });
      } else {
        toast.info('–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª—ë–Ω', {
          description: data.message || '–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞',
        });
      }
    },

    onError: (error: Error) => {
      logger.error('Manual sync mutation error', error);
      
      Sentry.captureException(error, {
        tags: { 
          stage: 'manual_sync',
          errorType: error.name,
        },
        extra: {
          errorMessage: error.message,
          errorStack: error.stack,
        },
      });
      
      toast.error('–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏', {
        description: error.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Ç—Ä–µ–∫–∞',
      });
    },
  });
};
