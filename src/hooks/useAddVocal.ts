import { useState } from 'react';
import { supabase } from '@/integrations/supabase/client';
import { useToast } from '@/hooks/use-toast';
import { logger } from '@/utils/logger';

interface AddVocalParams {
  trackId: string;
  vocalText?: string;
  vocalStyle?: string;
}

export const useAddVocal = () => {
  const [isGenerating, setIsGenerating] = useState(false);
  const { toast } = useToast();

  const addVocal = async (params: AddVocalParams) => {
    setIsGenerating(true);
    try {
      logger.info(`üé§ [ADD-VOCAL] Starting vocal generation for track: ${params.trackId}`);

      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç—Ä–µ–∫–∞
      const { data: track, error: trackError } = await supabase
        .from('tracks')
        .select('audio_url, title, style_tags')
        .eq('id', params.trackId)
        .single();

      if (trackError || !track?.audio_url) {
        throw new Error('–¢—Ä–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –∏–º–µ–µ—Ç –∞—É–¥–∏–æ');
      }

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–æ–∫–∞–ª —á–µ—Ä–µ–∑ generate-suno —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º make_instrumental = false
      const { data, error } = await supabase.functions.invoke('generate-suno', {
        body: {
          prompt: params.vocalText || `Vocal for ${track.title}`,
          tags: params.vocalStyle || track.style_tags?.join(', ') || 'vocal',
          make_instrumental: false,
          reference_audio_url: track.audio_url,
          model: 'V4_5PLUS'
        }
      });

      if (error) {
        logger.error(`‚ùå [ADD-VOCAL] Failed: ${error.message}`);
        throw error;
      }

      logger.info(`‚úÖ [ADD-VOCAL] Task started: ${JSON.stringify(data)}`);

      toast({
        title: '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–æ–∫–∞–ª–∞ –Ω–∞—á–∞—Ç–æ',
        description: '–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –≤–æ–∫–∞–ª—å–Ω–∞—è –¥–æ—Ä–æ–∂–∫–∞. –≠—Ç–æ –∑–∞–π–º–µ—Ç –æ–∫–æ–ª–æ –º–∏–Ω—É—Ç—ã.'
      });

      return data;
    } catch (error) {
      logger.error(`‚ùå [ADD-VOCAL] Error: ${error instanceof Error ? error.message : 'Unknown error'}`);
      toast({
        variant: 'destructive',
        title: '–û—à–∏–±–∫–∞',
        description: error instanceof Error ? error.message : '–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –≤–æ–∫–∞–ª'
      });
      throw error;
    } finally {
      setIsGenerating(false);
    }
  };

  return { addVocal, isGenerating };
};
