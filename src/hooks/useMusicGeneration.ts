/**
 * Custom hook for music generation logic
 * Separates business logic from UI components
 */

import { useState } from "react";
import { useToast } from "@/hooks/use-toast";
import { ApiService } from "@/services/api.service";
import { supabase } from "@/integrations/supabase/client";
import { logError, logInfo, logDebug, logWarn } from "@/utils/logger";

export const useMusicGeneration = (onSuccess?: () => void) => {
  const [prompt, setPrompt] = useState("");
  const [isGenerating, setIsGenerating] = useState(false);
  const [isImproving, setIsImproving] = useState(false);
  const [provider, setProvider] = useState<'replicate' | 'suno'>('suno');
  const [hasVocals, setHasVocals] = useState(false);
  const [lyrics, setLyrics] = useState("");
  const [styleTags, setStyleTags] = useState<string[]>([]);
  const { toast } = useToast();

  const improvePrompt = async () => {
    if (!prompt.trim()) {
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º—É–∑—ã–∫–∏",
        variant: "destructive",
      });
      return;
    }

    setIsImproving(true);
    try {
      const response = await ApiService.improvePrompt({ prompt });
      setPrompt(response.improvedPrompt);
      
      toast({
        title: "‚ú® –ü—Ä–æ–º–ø—Ç —É–ª—É—á—à–µ–Ω!",
        description: "–í–∞—à–µ –æ–ø–∏—Å–∞–Ω–∏–µ –±—ã–ª–æ —É–ª—É—á—à–µ–Ω–æ —Å –ø–æ–º–æ—â—å—é AI",
      });
    } catch (error) {
      console.error("Error improving prompt:", error);
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: error instanceof Error ? error.message : "–ù–µ —É–¥–∞–ª–æ—Å—å —É–ª—É—á—à–∏—Ç—å –ø—Ä–æ–º–ø—Ç",
        variant: "destructive",
      });
    } finally {
      setIsImproving(false);
    }
  };

  const generateMusic = async () => {
    if (!prompt.trim()) {
      logWarn("–ü–æ–ø—ã—Ç–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º—É–∑—ã–∫–∏ —Å –ø—É—Å—Ç—ã–º –ø—Ä–æ–º–ø—Ç–æ–º", "useMusicGeneration");
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º—É–∑—ã–∫–∏",
        variant: "destructive",
      });
      return;
    }

    setIsGenerating(true);
    logInfo("–ù–∞—á–∞–ª–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º—É–∑—ã–∫–∏", "useMusicGeneration", { 
      prompt: prompt.substring(0, 100), 
      provider, 
      hasVocals 
    });

    try {
      const { data: { user } } = await supabase.auth.getUser();
      
      if (!user) {
        logWarn("–ü–æ–ø—ã—Ç–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º—É–∑—ã–∫–∏ –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏", "useMusicGeneration");
        toast({
          title: "–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è",
          description: "–í–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º—É–∑—ã–∫–∏",
          variant: "destructive",
        });
        return;
      }

      // Start generation process (userId extracted from JWT by edge function)
      await ApiService.generateMusic({
        title: prompt.substring(0, 50) || "Untitled Track",
        prompt: prompt,
        provider,
        lyrics: lyrics || undefined,
        hasVocals,
        styleTags,
        customMode: !!lyrics,
      });

      logInfo("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º—É–∑—ã–∫–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–∞", "useMusicGeneration", {
        userId: user.id,
        provider,
        title: prompt.substring(0, 50)
      });

      toast({
        title: "üéµ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–∞—á–∞–ª–∞—Å—å!",
        description: "–í–∞—à —Ç—Ä–µ–∫ —Å–æ–∑–¥–∞—ë—Ç—Å—è. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –æ–∫–æ–ª–æ –º–∏–Ω—É—Ç—ã...",
      });

      setPrompt("");
      onSuccess?.();
    } catch (error) {
      logError("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º—É–∑—ã–∫–∏", error as Error, "useMusicGeneration", {
        prompt: prompt.substring(0, 100),
        provider,
        hasVocals
      });
      
      toast({
        title: "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏",
        description: error instanceof Error ? error.message : "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –º—É–∑—ã–∫—É",
        variant: "destructive",
      });
    } finally {
      setIsGenerating(false);
    }
  };

  return {
    prompt,
    setPrompt,
    isGenerating,
    isImproving,
    improvePrompt,
    generateMusic,
    provider,
    setProvider,
    hasVocals,
    setHasVocals,
    lyrics,
    setLyrics,
    styleTags,
    setStyleTags,
  };
};
