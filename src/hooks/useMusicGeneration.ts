import { useState, useCallback, useMemo } from "react";
import { useToast } from "@/hooks/use-toast";
import { ApiService, GenerateMusicRequest } from "@/services/api.service";
import { supabase } from "@/integrations/supabase/client";
import { logError, logInfo } from "@/utils/logger";

export const useMusicGeneration = (onSuccess?: () => void) => {
  const [isGenerating, setIsGenerating] = useState(false);
  const [isImproving, setIsImproving] = useState(false);
  const { toast } = useToast();

  const improvePrompt = useCallback(async (prompt: string) => {
    if (!prompt.trim()) {
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º—É–∑—ã–∫–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è.",
        variant: "destructive",
      });
      return null;
    }

    if (isImproving) return null;

    setIsImproving(true);
    logInfo("–ù–∞—á–∞–ª–æ —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞", "useMusicGeneration", { originalLength: prompt.length });

    try {
      const response = await ApiService.improvePrompt({ prompt });
      toast({
        title: "‚ú® –ü—Ä–æ–º–ø—Ç —É–ª—É—á—à–µ–Ω!",
        description: "–í–∞—à–µ –æ–ø–∏—Å–∞–Ω–∏–µ –±—ã–ª–æ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Å –ø–æ–º–æ—â—å—é AI.",
      });
      return response;
    } catch (error) {
      logError("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–ª—É—á—à–µ–Ω–∏–∏ –ø—Ä–æ–º–ø—Ç–∞", error as Error, "useMusicGeneration");
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: error instanceof Error ? error.message : "–ù–µ —É–¥–∞–ª–æ—Å—å —É–ª—É—á—à–∏—Ç—å –ø—Ä–æ–º–ø—Ç.",
        variant: "destructive",
      });
      return null;
    } finally {
      setIsImproving(false);
    }
  }, [isImproving, toast]);

  const generateMusic = useCallback(async (params: Omit<GenerateMusicRequest, 'userId' | 'trackId'>) => {
    if (isGenerating) return;

    setIsGenerating(true);
    logInfo("üéµ [useMusicGeneration] –ù–∞—á–∞–ª–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º—É–∑—ã–∫–∏", "useMusicGeneration", { prompt: params.prompt });

    try {
      const { data: { user } } = await supabase.auth.getUser();
      if (!user) {
        throw new Error("–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º—É–∑—ã–∫–∏.");
      }

      const newTrack = await ApiService.createTrack(
        user.id,
        params.prompt.substring(0, 100) || "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è",
        params.prompt,
        'suno',
        params.lyrics,
        params.hasVocals,
        params.styleTags
      );

      await ApiService.generateMusic({
        ...params,
        trackId: newTrack.id,
        userId: user.id,
        title: params.prompt.substring(0, 100) || "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è",
        provider: 'suno'
      });

      toast({
        title: "üéµ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–∞—á–∞–ª–∞—Å—å!",
        description: "–í–∞—à —Ç—Ä–µ–∫ —Å–æ–∑–¥–∞—ë—Ç—Å—è. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –æ–∫–æ–ª–æ –º–∏–Ω—É—Ç—ã...",
      });
      
      onSuccess?.();

    } catch (error) {
      logError("üî¥ [useMusicGeneration] –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º—É–∑—ã–∫–∏", error as Error, "useMusicGeneration");
      toast({
        title: "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏",
        description: error instanceof Error ? error.message : "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –º—É–∑—ã–∫—É.",
        variant: "destructive",
      });
    } finally {
      setIsGenerating(false);
    }
  }, [isGenerating, toast, onSuccess]);

  return useMemo(() => ({
    isGenerating,
    isImproving,
    generateMusic,
    improvePrompt,
  }), [isGenerating, isImproving, generateMusic, improvePrompt]);
};