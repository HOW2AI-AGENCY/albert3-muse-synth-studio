/**
 * Performance Monitor - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 * –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
 */

import { logger } from '@/utils/logger';

interface PerformanceMetric {
  name: string;
  value: number;
  timestamp: number;
  context?: string;
  metadata?: Record<string, unknown>;
}

interface PerformanceThresholds {
  generation: number; // –≤—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (–º—Å)
  apiCall: number; // –≤—Ä–µ–º—è API –≤—ã–∑–æ–≤–∞ (–º—Å)
  rendering: number; // –≤—Ä–µ–º—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ (–º—Å)
  audioLoad: number; // –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏ –∞—É–¥–∏–æ (–º—Å)
}

class PerformanceMonitor {
  private metrics: PerformanceMetric[] = [];
  private maxMetrics = 500;
  private timers = new Map<string, number>();
  
  private thresholds: PerformanceThresholds = {
    generation: 90000, // 90 —Å–µ–∫—É–Ω–¥
    apiCall: 10000, // 10 —Å–µ–∫—É–Ω–¥
    rendering: 1000, // 1 —Å–µ–∫—É–Ω–¥–∞
    audioLoad: 5000, // 5 —Å–µ–∫—É–Ω–¥
  };

  /**
   * –ù–∞—á–∞—Ç—å –∏–∑–º–µ—Ä–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏
   */
  startTimer(id: string, context?: string): void {
    this.timers.set(id, performance.now());
    logger.debug(`‚è±Ô∏è Timer started: ${id}`, context || 'PerformanceMonitor');
  }

  /**
   * –ó–∞–≤–µ—Ä—à–∏—Ç—å –∏–∑–º–µ—Ä–µ–Ω–∏–µ –∏ –∑–∞–ø–∏—Å–∞—Ç—å –º–µ—Ç—Ä–∏–∫—É
   */
  endTimer(
    id: string, 
    metricName: string, 
    context?: string,
    metadata?: Record<string, unknown>
  ): number | null {
    const startTime = this.timers.get(id);
    
    if (!startTime) {
      logger.warn(`Timer not found: ${id}`, 'PerformanceMonitor');
      return null;
    }

    const duration = performance.now() - startTime;
    this.timers.delete(id);

    this.recordMetric(metricName, duration, context, metadata);

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä–æ–≥–æ–≤
    this.checkThreshold(metricName, duration, context, metadata);

    return duration;
  }

  /**
   * –ó–∞–ø–∏—Å–∞—Ç—å –º–µ—Ç—Ä–∏–∫—É –≤—Ä—É—á–Ω—É—é
   */
  recordMetric(
    name: string,
    value: number,
    context?: string,
    metadata?: Record<string, unknown>
  ): void {
    const metric: PerformanceMetric = {
      name,
      value,
      timestamp: Date.now(),
      context,
      metadata,
    };

    this.metrics.push(metric);

    // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞
    if (this.metrics.length > this.maxMetrics) {
      this.metrics = this.metrics.slice(-this.maxMetrics);
    }

    logger.debug(`üìä Metric recorded: ${name} = ${value.toFixed(2)}ms`, context || 'PerformanceMonitor', metadata);
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ø–æ—Ä–æ–≥–æ–≤
   */
  private checkThreshold(
    name: string,
    value: number,
    context?: string,
    metadata?: Record<string, unknown>
  ): void {
    const threshold = this.getThreshold(name);
    
    if (threshold && value > threshold) {
      logger.warn(
        `‚ö†Ô∏è Performance threshold exceeded for ${name}`,
        'PerformanceMonitor',
        {
          metric: name,
          value: `${value.toFixed(2)}ms`,
          threshold: `${threshold}ms`,
          excess: `${(value - threshold).toFixed(2)}ms`,
          context,
          ...metadata,
        }
      );
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Ä–æ–≥ –¥–ª—è –º–µ—Ç—Ä–∏–∫–∏
   */
  private getThreshold(metricName: string): number | null {
    if (metricName.includes('generation')) return this.thresholds.generation;
    if (metricName.includes('api') || metricName.includes('request')) return this.thresholds.apiCall;
    if (metricName.includes('render')) return this.thresholds.rendering;
    if (metricName.includes('audio') || metricName.includes('load')) return this.thresholds.audioLoad;
    return null;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏
   */
  getMetrics(filter?: { name?: string; context?: string; since?: number }): PerformanceMetric[] {
    let filtered = this.metrics;

    if (filter?.name) {
      filtered = filtered.filter(m => m.name.includes(filter.name!));
    }

    if (filter?.context) {
      filtered = filtered.filter(m => m.context?.includes(filter.context!));
    }

    if (filter?.since) {
      filtered = filtered.filter(m => m.timestamp >= filter.since!);
    }

    return filtered;
  }

  /**
   * –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º–µ—Ç—Ä–∏–∫–µ
   */
  getStats(metricName: string): {
    count: number;
    avg: number;
    min: number;
    max: number;
    p50: number;
    p95: number;
    p99: number;
  } | null {
    const metrics = this.getMetrics({ name: metricName });
    
    if (metrics.length === 0) return null;

    const values = metrics.map(m => m.value).sort((a, b) => a - b);
    const sum = values.reduce((acc, v) => acc + v, 0);

    const percentile = (p: number) => {
      const index = Math.ceil((p / 100) * values.length) - 1;
      return values[index] || 0;
    };

    return {
      count: values.length,
      avg: sum / values.length,
      min: values[0] || 0,
      max: values[values.length - 1] || 0,
      p50: percentile(50),
      p95: percentile(95),
      p99: percentile(99),
    };
  }

  /**
   * –û—á–∏—Å—Ç–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏
   */
  clearMetrics(): void {
    this.metrics = [];
    this.timers.clear();
    logger.info('Performance metrics cleared', 'PerformanceMonitor');
  }

  /**
   * –≠–∫—Å–ø–æ—Ä—Ç –º–µ—Ç—Ä–∏–∫
   */
  exportMetrics(): string {
    return JSON.stringify({
      metrics: this.metrics,
      stats: {
        generation: this.getStats('generation'),
        apiCall: this.getStats('api'),
        rendering: this.getStats('render'),
        audioLoad: this.getStats('audio'),
      },
      timestamp: new Date().toISOString(),
    }, null, 2);
  }

  /**
   * –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ Web Vitals
   */
  monitorWebVitals(): void {
    if (typeof window === 'undefined') return;

    // –ò–∑–º–µ—Ä—è–µ–º Navigation Timing
    if ('performance' in window && 'getEntriesByType' in performance) {
      const navigationTiming = performance.getEntriesByType('navigation')[0] as PerformanceNavigationTiming;
      
      if (navigationTiming) {
        this.recordMetric('page.domContentLoaded', navigationTiming.domContentLoadedEventEnd - navigationTiming.fetchStart);
        this.recordMetric('page.loadComplete', navigationTiming.loadEventEnd - navigationTiming.fetchStart);
        this.recordMetric('page.domInteractive', navigationTiming.domInteractive - navigationTiming.fetchStart);
      }
    }

    // –°–ª—É—à–∞–µ–º Paint Timing
    if ('PerformanceObserver' in window) {
      try {
        const paintObserver = new PerformanceObserver((list) => {
          for (const entry of list.getEntries()) {
            this.recordMetric(`paint.${entry.name}`, entry.startTime);
          }
        });
        paintObserver.observe({ entryTypes: ['paint'] });

        // –°–ª—É—à–∞–µ–º Long Tasks (> 50ms)
        const longTaskObserver = new PerformanceObserver((list) => {
          for (const entry of list.getEntries()) {
            logger.warn('‚ö†Ô∏è Long task detected', 'PerformanceMonitor', {
              duration: `${entry.duration.toFixed(2)}ms`,
              startTime: entry.startTime,
            });
            this.recordMetric('task.long', entry.duration);
          }
        });
        longTaskObserver.observe({ entryTypes: ['longtask'] });
      } catch (e) {
        logger.debug('PerformanceObserver not fully supported', 'PerformanceMonitor');
      }
    }
  }

  /**
   * –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–∞–º—è—Ç–∏ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)
   */
  monitorMemory(): void {
    if (typeof window === 'undefined') return;

    const performance = (window as any).performance;
    if (performance?.memory) {
      const memoryInfo = performance.memory;
      
      this.recordMetric('memory.used', memoryInfo.usedJSHeapSize / 1048576, 'PerformanceMonitor', {
        unit: 'MB',
      });
      
      this.recordMetric('memory.total', memoryInfo.totalJSHeapSize / 1048576, 'PerformanceMonitor', {
        unit: 'MB',
      });

      const usagePercent = (memoryInfo.usedJSHeapSize / memoryInfo.jsHeapSizeLimit) * 100;
      
      if (usagePercent > 90) {
        logger.warn('‚ö†Ô∏è High memory usage detected', 'PerformanceMonitor', {
          used: `${(memoryInfo.usedJSHeapSize / 1048576).toFixed(2)} MB`,
          total: `${(memoryInfo.jsHeapSizeLimit / 1048576).toFixed(2)} MB`,
          percent: `${usagePercent.toFixed(2)}%`,
        });
      }
    }
  }
}

// Singleton instance
export const performanceMonitor = new PerformanceMonitor();

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ Web Vitals –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
if (typeof window !== 'undefined') {
  window.addEventListener('load', () => {
    performanceMonitor.monitorWebVitals();
  });

  // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–∞–º—è—Ç–∏
  setInterval(() => {
    performanceMonitor.monitorMemory();
  }, 60000); // –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
}

// –£–¥–æ–±–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
export const startPerformanceTimer = (id: string, context?: string) => 
  performanceMonitor.startTimer(id, context);

export const endPerformanceTimer = (id: string, metricName: string, context?: string, metadata?: Record<string, unknown>) => 
  performanceMonitor.endTimer(id, metricName, context, metadata);

export const recordPerformanceMetric = (name: string, value: number, context?: string, metadata?: Record<string, unknown>) => 
  performanceMonitor.recordMetric(name, value, context, metadata);
