import * as Sentry from "@sentry/react";

/**
 * –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ª–æ–≥–≥–µ—Ä –¥–ª—è Albert3 Muse Synth Studio
 * –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫, –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
 */

export enum LogLevel {
  ERROR = 'error',
  WARN = 'warn',
  INFO = 'info',
  DEBUG = 'debug'
}

const enableSentryInDevelopment = import.meta.env?.VITE_SENTRY_ENABLE_IN_DEV === "true";

const hasSentryClient = (): boolean => {
  try {
    return Boolean(Sentry.getClient());
  } catch (_error) {
    return false;
  }
};

const breadcrumbLevelMap: Record<LogLevel, Sentry.SeverityLevel> = {
  [LogLevel.ERROR]: "error",
  [LogLevel.WARN]: "warning",
  [LogLevel.INFO]: "info",
  [LogLevel.DEBUG]: "debug",
};

interface LogEntry {
  level: LogLevel;
  message: string;
  timestamp: Date;
  context?: string;
  data?: Record<string, unknown>;
  error?: Error;
}

class Logger {
  private isDevelopment = import.meta.env.DEV;
  private isBrowser = typeof window !== 'undefined';
  private logs: LogEntry[] = [];
  private maxLogs = 1000; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–æ–≥–æ–≤ –≤ –ø–∞–º—è—Ç–∏

  /**
   * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏
   */
  error(message: string, error?: Error, context?: string, data?: Record<string, unknown>) {
    this.log(LogLevel.ERROR, message, context, data, error);
  }

  /**
   * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
   */
  warn(message: string, context?: string, data?: Record<string, unknown>) {
    this.log(LogLevel.WARN, message, context, data);
  }

  /**
   * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
   */
  info(message: string, context?: string, data?: Record<string, unknown>) {
    this.log(LogLevel.INFO, message, context, data);
  }

  /**
   * –û—Ç–ª–∞–¥–æ—á–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ (—Ç–æ–ª—å–∫–æ –≤ development)
   */
  debug(message: string, context?: string, data?: Record<string, unknown>) {
    if (this.isDevelopment) {
      this.log(LogLevel.DEBUG, message, context, data);
    }
  }

  /**
   * –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
   */
  private log(
    level: LogLevel,
    message: string,
    context?: string,
    data?: Record<string, unknown>,
    error?: Error
  ) {
    const logEntry: LogEntry = {
      level,
      message,
      timestamp: new Date(),
      context,
      data,
      error
    };

    // –î–æ–±–∞–≤–ª—è–µ–º –≤ –º–∞—Å—Å–∏–≤ –ª–æ–≥–æ–≤
    this.logs.push(logEntry);

    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –º–∞—Å—Å–∏–≤–∞
    if (this.logs.length > this.maxLogs) {
      this.logs = this.logs.slice(-this.maxLogs);
    }

    // –í—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å
    this.consoleLog(logEntry);

    // –î–æ–±–∞–≤–ª—è–µ–º —Ö–ª–µ–±–Ω—ã–µ –∫—Ä–æ—à–∫–∏ Sentry –¥–ª—è –±–æ–ª–µ–µ –ø–æ–ª–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    this.addSentryBreadcrumb(logEntry);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Sentry –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    this.captureWithSentry(logEntry);

    // –í production –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    if (!this.isDevelopment && this.isBrowser && level === LogLevel.ERROR) {
      void this.sendToServer(logEntry);
    }
  }

  /**
   * –í—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
   */
  private consoleLog(entry: LogEntry) {
    const { level, message, timestamp, context, data, error } = entry;
    const timeStr = timestamp.toISOString();
    const contextStr = context ? `[${context}]` : '';
    const fullMessage = `${timeStr} ${contextStr} ${message}`;

    switch (level) {
      case LogLevel.ERROR:
        console.error(`üî¥ ${fullMessage}`, data, error);
        break;
      case LogLevel.WARN:
        console.warn(`üü° ${fullMessage}`, data);
        break;
      case LogLevel.INFO:
        console.info(`üîµ ${fullMessage}`, data);
        break;
      case LogLevel.DEBUG:
        console.debug(`‚ö™ ${fullMessage}`, data);
        break;
    }
  }

  private captureWithSentry(entry: LogEntry) {
    if (!this.isBrowser) {
      return;
    }

    if (entry.level !== LogLevel.ERROR) {
      return;
    }

    if (this.isDevelopment && !enableSentryInDevelopment) {
      return;
    }

    if (!hasSentryClient()) {
      return;
    }
    const maskedData = this.maskSensitiveData(entry.data);

    Sentry.captureException(entry.error ?? new Error(entry.message), (scope) => {
      scope.setLevel("error");
      scope.setTag("logger.context", entry.context ?? "global");
      scope.setContext("logger", {
        message: entry.message,
        timestamp: entry.timestamp.toISOString(),
        data: maskedData,
      });
      if (maskedData) {
        scope.setExtras(maskedData);
      }
      return scope;
    });
  }

  private addSentryBreadcrumb(entry: LogEntry) {
    if (!this.isBrowser) {
      return;
    }

    if (this.isDevelopment && !enableSentryInDevelopment) {
      return;
    }

    if (!hasSentryClient()) {
      return;
    }

    const maskedData = this.maskSensitiveData(entry.data);

    Sentry.addBreadcrumb({
      level: breadcrumbLevelMap[entry.level] ?? "info",
      category: entry.context ?? "logger",
      message: entry.message,
      data: maskedData,
      timestamp: Math.floor(entry.timestamp.getTime() / 1000),
    });
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ –Ω–∞ —Å–µ—Ä–≤–µ—Ä (–≤ production)
   */
  private async sendToServer(entry: LogEntry) {
    if (!this.isBrowser) {
      return;
    }

    try {
      // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å —Å —Å–µ—Ä–≤–∏—Å–∞–º–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
      // –Ω–∞–ø—Ä–∏–º–µ—Ä, Sentry, LogRocket, –∏–ª–∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π API

      // –ü—Ä–∏–º–µ—Ä –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Supabase Edge Function
      const maskedData = this.maskSensitiveData(entry.data);

      const response = await fetch('/functions/v1/log-error', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          level: entry.level,
          message: entry.message,
          timestamp: entry.timestamp.toISOString(),
          context: entry.context,
          data: maskedData,
          error: entry.error ? {
            name: entry.error.name,
            message: entry.error.message,
            stack: entry.error.stack
          } : undefined,
          userAgent: typeof navigator !== 'undefined' ? navigator.userAgent : undefined,
          url: typeof window !== 'undefined' ? window.location.href : undefined
        })
      });

      if (!response.ok) {
        console.error('Failed to send log to server:', response.statusText);
      }
    } catch (error) {
      console.error('Error sending log to server:', error);
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ª–æ–≥–∏
   */
  getLogs(): LogEntry[] {
    return [...this.logs];
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –ª–æ–≥–∏ –ø–æ —É—Ä–æ–≤–Ω—é
   */
  getLogsByLevel(level: LogLevel): LogEntry[] {
    return this.logs.filter(log => log.level === level);
  }

  /**
   * –û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥–∏
   */
  clearLogs() {
    this.logs = [];
  }

  /**
   * –ú–∞—Å–∫–∏—Ä—É–µ–º —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
   */
  private maskSensitiveData(data?: Record<string, unknown>): Record<string, unknown> | undefined {
    return maskObject(data);
  }

  /**
   * –≠–∫—Å–ø–æ—Ä—Ç –ª–æ–≥–æ–≤ –≤ JSON
   */
  exportLogs(): string {
    return JSON.stringify(this.logs, null, 2);
  }
}

// –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ª–æ–≥–≥–µ—Ä–∞
export const logger = new Logger();

/**
 * Masks a string value for logging.
 * @param value The string to mask.
 * @returns A masked version of the string.
 */
const maskString = (value: string): string => {
  // ‚úÖ SECURITY: –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø–∞—Ç—Ç–µ—Ä–Ω—ã API keys/tokens
  const sensitivePatterns = [
    /sk-[\w-]+/gi,           // OpenAI keys
    /mureka_[\w-]+/gi,       // Mureka keys
    /suno_[\w-]+/gi,         // Suno keys
    /bearer\s+[\w-]+/gi,     // Bearer tokens
    /^ey[\w-]+\.[\w-]+\.[\w-]+$/gi, // JWT tokens
  ];
  
  for (const pattern of sensitivePatterns) {
    if (pattern.test(value)) {
      return '[REDACTED]';
    }
  }
  
  if (value.length <= 6) {
    return `${value[0] ?? "*"}***${value[value.length - 1] ?? "*"}`;
  }
  const start = value.slice(0, 3);
  const end = value.slice(-2);
  return `${start}***${end}`;
};

/**
 * Recursively masks sensitive data in an object.
 * @param data The object to mask.
 * @returns A new object with sensitive data masked.
 */
export const maskObject = (data?: Record<string, unknown>): Record<string, unknown> | undefined => {
  if (!data) {
    return undefined;
  }

  // ‚úÖ SECURITY: –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–ª—é—á–µ–π
  const sensitiveKeywords = [
    "token", "key", "secret", "password", "authorization", "cookie", "credential",
    "api_key", "apikey", "api-key", "auth", "bearer", "jwt",
    "lovable_api_key", "suno_api_key", "mureka_api_key", "openai_api_key"
  ];

  const maskValue = (value: unknown, keyPath: string[]): unknown => {
    if (Array.isArray(value)) {
      return value.map((item, index) => maskValue(item, [...keyPath, String(index)]));
    }

    if (value && typeof value === "object") {
      return Object.entries(value as Record<string, unknown>).reduce<Record<string, unknown>>((acc, [nestedKey, nestedValue]) => {
        acc[nestedKey] = maskValue(nestedValue, [...keyPath, nestedKey]);
        return acc;
      }, {});
    }

    const lastKey = keyPath[keyPath.length - 1]?.toLowerCase() ?? "";
    const shouldMask = sensitiveKeywords.some((keyword) => lastKey.includes(keyword));

    if (shouldMask) {
      if (typeof value === "string") {
        return maskString(value);
      }
      if (typeof value === "number") {
        return "***";
      }
      if (typeof value === "boolean") {
        return value;
      }
      return value === null || value === undefined ? value : "***";
    }

    return value;
  };

  return maskValue({ ...data }, []) as Record<string, unknown>;
};


if (typeof window !== 'undefined') {
  // –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏
  window.addEventListener('error', (event) => {
    logger.error(
      '–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ JavaScript',
      event.error,
      'GlobalErrorHandler',
      {
        filename: event.filename,
        lineno: event.lineno,
        colno: event.colno
      }
    );
  });

  // –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ Promise rejections
  window.addEventListener('unhandledrejection', (event) => {
    logger.error(
      '–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ Promise',
      event.reason instanceof Error ? event.reason : new Error(String(event.reason)),
      'GlobalPromiseHandler',
      {
        reason: event.reason
      }
    );
  });
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —É–¥–æ–±–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
export const logError = (message: string, error?: Error, context?: string, data?: Record<string, unknown>) =>
  logger.error(message, error, context, data);

export const logWarn = (message: string, context?: string, data?: Record<string, unknown>) =>
  logger.warn(message, context, data);

export const logInfo = (message: string, context?: string, data?: Record<string, unknown>) =>
  logger.info(message, context, data);

export const logDebug = (message: string, context?: string, data?: Record<string, unknown>) =>
  logger.debug(message, context, data);

