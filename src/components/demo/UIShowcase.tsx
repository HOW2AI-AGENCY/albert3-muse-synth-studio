import React, { useState } from 'react';
import { cn } from '@/lib/utils';

// –ò–º–ø–æ—Ä—Ç—ã –Ω–æ–≤—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
import { ResponsiveLayout, MobileContainer, DesktopContainer, AdaptiveGrid } from '../layout/ResponsiveLayout';
import { MobileNavigation } from '../navigation/MobileNavigation';
import { 
  AccessibleButton, 
  AccessibleInput, 
  AccessibleSelect, 
  AccessibleCheckbox,
  AccessibleToast 
} from '../ui/AccessibleComponents';
import { 
  SmoothAnimation, 
  AnimatedTransition, 
  AnimatedList,
  ButtonPressAnimation,
  LoadingAnimation,
  CardRevealAnimation,
  ModalAnimation 
} from '../animations/SmoothAnimations';
import { 
  PullToRefresh, 
  SwipeActions, 
  useHapticFeedback,
  LongPress,
  RippleEffect,
  BottomSheet 
} from '../mobile/MobileUIPatterns';
import { 
  DeviceInfo, 
  AutoTester, 
  DeviceSimulator,
  CompatibilityStats,
  useDeviceDetection,
  deviceProfiles,
  TestResult 
} from '../testing/CrossPlatformTester';

/**
 * üé® –ì–ª–∞–≤–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ UI
 */
export const UIShowcase: React.FC = () => {
  const [activeTab, setActiveTab] = useState('layout');
  const [showModal, setShowModal] = useState(false);
  const [showBottomSheet, setShowBottomSheet] = useState(false);
  const [showToast, setShowToast] = useState(false);
  const [testResults, setTestResults] = useState<TestResult[]>([]);
  const [selectedDevice, setSelectedDevice] = useState(deviceProfiles[0]);
  
  const { currentDevice } = useDeviceDetection();
  const { trigger: triggerHaptic } = useHapticFeedback();

  // –î–µ–º–æ –¥–∞–Ω–Ω—ã–µ
  const demoItems = [
    { id: 1, title: '–ü–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç', description: '–û–ø–∏—Å–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞' },
    { id: 2, title: '–í—Ç–æ—Ä–æ–π —ç–ª–µ–º–µ–Ω—Ç', description: '–û–ø–∏—Å–∞–Ω–∏–µ –≤—Ç–æ—Ä–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞' },
    { id: 3, title: '–¢—Ä–µ—Ç–∏–π —ç–ª–µ–º–µ–Ω—Ç', description: '–û–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–µ—Ç—å–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞' },
  ];

  const swipeActions = [
    {
      id: 'edit',
      label: '–ò–∑–º–µ–Ω–∏—Ç—å',
      icon: <span>‚úèÔ∏è</span>,
      color: 'primary' as const,
      onAction: () => {
        triggerHaptic('medium');
        alert('–î–µ–π—Å—Ç–≤–∏–µ: –ò–∑–º–µ–Ω–∏—Ç—å');
      },
    },
    {
      id: 'delete',
      label: '–£–¥–∞–ª–∏—Ç—å',
      icon: <span>üóëÔ∏è</span>,
      color: 'destructive' as const,
      onAction: () => {
        triggerHaptic('heavy');
        alert('–î–µ–π—Å—Ç–≤–∏–µ: –£–¥–∞–ª–∏—Ç—å');
      },
    },
  ];

  // –¢–µ—Å—Ç—ã –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  const uiTests = [
    {
      name: '–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤',
      test: async (device: any) => {
        const startTime = performance.now();
        await new Promise(resolve => setTimeout(resolve, 100));
        const loadTime = performance.now() - startTime;
        
        return {
          deviceId: device.id,
          testName: '–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤',
          status: (loadTime < 200 ? 'pass' : 'warning') as 'pass' | 'fail' | 'warning' | 'pending',
          message: `–í—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏: ${Math.round(loadTime)}ms`,
          timestamp: new Date(),
          metrics: {
            loadTime: Math.round(loadTime),
            renderTime: 0,
            interactionTime: 0,
            memoryUsage: 0,
          },
        };
      },
    },
    {
      name: '–ê–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å',
      test: async (device: any) => {
        const isResponsive = device.viewport.width >= 320 && device.viewport.width <= 3840;
        
        return {
          deviceId: device.id,
          testName: '–ê–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å',
          status: (isResponsive ? 'pass' : 'fail') as 'pass' | 'fail' | 'warning' | 'pending',
          message: isResponsive ? '–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è' : '–ù–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è',
          timestamp: new Date(),
        };
      },
    },
    {
      name: '–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å',
      test: async (device: any) => {
        const hasAccessibilityFeatures = device.features.touch || device.features.hover;
        
        return {
          deviceId: device.id,
          testName: '–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å',
          status: (hasAccessibilityFeatures ? 'pass' : 'warning') as 'pass' | 'fail' | 'warning' | 'pending',
          message: hasAccessibilityFeatures ? 'ARIA –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è' : '–û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞',
          timestamp: new Date(),
        };
      },
    },
  ];

  const handleRefresh = async () => {
    await new Promise(resolve => setTimeout(resolve, 1500));
    triggerHaptic('success');
  };

  const tabs = [
    { id: 'layout', label: '–ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –≤—ë—Ä—Å—Ç–∫–∞', icon: 'üì±' },
    { id: 'navigation', label: '–ù–∞–≤–∏–≥–∞—Ü–∏—è', icon: 'üß≠' },
    { id: 'accessibility', label: '–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å', icon: '‚ôø' },
    { id: 'animations', label: '–ê–Ω–∏–º–∞—Ü–∏–∏', icon: 'üé¨' },
    { id: 'mobile', label: '–ú–æ–±–∏–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã', icon: 'üëÜ' },
    { id: 'testing', label: '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ', icon: 'üß™' },
  ];

  return (
    <ResponsiveLayout className="min-h-screen bg-background">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <div className="sticky top-0 z-50 bg-background/80 backdrop-blur-sm border-b">
        <div className="container mx-auto px-4 py-4">
          <h1 className="text-2xl font-bold bg-gradient-to-r from-primary to-accent bg-clip-text text-transparent">
            üé® UI Showcase - –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
          </h1>
          <p className="text-muted-foreground mt-1">
            –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –≤—Å–µ—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º
          </p>
        </div>
      </div>

      {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ */}
      <div className="container mx-auto px-4 py-4">
        <DeviceInfo device={currentDevice} />
      </div>

      {/* –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Ç–∞–±–∞–º */}
      <div className="sticky top-20 z-40 bg-background/80 backdrop-blur-sm border-b">
        <div className="container mx-auto px-4">
          <div className="flex overflow-x-auto gap-2 py-3">
            {tabs.map((tab) => (
              <button
                key={tab.id}
                onClick={() => setActiveTab(tab.id)}
                className={cn(
                  'flex items-center gap-2 px-4 py-2 rounded-full whitespace-nowrap transition-all duration-200',
                  activeTab === tab.id
                    ? 'bg-primary text-primary-foreground shadow-md'
                    : 'bg-muted hover:bg-muted/80'
                )}
              >
                <span>{tab.icon}</span>
                <span className="text-sm font-medium">{tab.label}</span>
              </button>
            ))}
          </div>
        </div>
      </div>

      {/* –ö–æ–Ω—Ç–µ–Ω—Ç */}
      <div className="container mx-auto px-4 py-6">
        <AnimatedTransition show={true} enter="fadeIn">
          {/* –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –≤—ë—Ä—Å—Ç–∫–∞ */}
          {activeTab === 'layout' && (
            <div className="space-y-6">
              <CardRevealAnimation>
                <div className="p-6 bg-card border rounded-lg">
                  <h2 className="text-xl font-semibold mb-4">üì± –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –≤—ë—Ä—Å—Ç–∫–∞</h2>
                  
                  <AdaptiveGrid className="gap-4 mb-6">
                    <div className="p-4 bg-primary/10 rounded-lg">
                      <h3 className="font-medium mb-2">Mobile First</h3>
                      <p className="text-sm text-muted-foreground">
                        –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ —Å –ø–ª–∞–≤–Ω—ã–º –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ–º
                      </p>
                    </div>
                    
                    <div className="p-4 bg-secondary/10 rounded-lg">
                      <h3 className="font-medium mb-2">Responsive Grid</h3>
                      <p className="text-sm text-muted-foreground">
                        –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∞–¥–∞–ø—Ç–∞—Ü–∏—è –ø–æ–¥ —Ä–∞–∑–º–µ—Ä —ç–∫—Ä–∞–Ω–∞
                      </p>
                    </div>
                    
                    <div className="p-4 bg-accent/10 rounded-lg">
                      <h3 className="font-medium mb-2">Safe Areas</h3>
                      <p className="text-sm text-muted-foreground">
                        –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö –∑–æ–Ω iOS –∏ Android
                      </p>
                    </div>
                  </AdaptiveGrid>

                  <MobileContainer>
                    <div className="p-4 bg-gradient-to-r from-blue-500/10 to-purple-500/10 rounded-lg">
                      <p className="text-sm">
                        üì± –≠—Ç–æ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
                      </p>
                    </div>
                  </MobileContainer>

                  <DesktopContainer>
                    <div className="p-4 bg-gradient-to-r from-green-500/10 to-blue-500/10 rounded-lg">
                      <p className="text-sm">
                        üñ•Ô∏è –≠—Ç–æ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞ –¥–µ—Å–∫—Ç–æ–ø–µ
                      </p>
                    </div>
                  </DesktopContainer>
                </div>
              </CardRevealAnimation>
            </div>
          )}

          {/* –ù–∞–≤–∏–≥–∞—Ü–∏—è */}
          {activeTab === 'navigation' && (
            <div className="space-y-6">
              <CardRevealAnimation>
                <div className="p-6 bg-card border rounded-lg">
                  <h2 className="text-xl font-semibold mb-4">üß≠ –ú–æ–±–∏–ª—å–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è</h2>
                  
                  <div className="relative h-96 bg-muted rounded-lg overflow-hidden">
                    <MobileNavigation
                      tabs={[
                        { id: 'home', label: '–ì–ª–∞–≤–Ω–∞—è', icon: ({ className }) => <span className={className}>üè†</span> },
                        { id: 'search', label: '–ü–æ–∏—Å–∫', icon: ({ className }) => <span className={className}>üîç</span> },
                        { id: 'library', label: '–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞', icon: ({ className }) => <span className={className}>üìö</span> },
                        { id: 'profile', label: '–ü—Ä–æ—Ñ–∏–ª—å', icon: ({ className }) => <span className={className}>üë§</span> },
                      ]}
                      activeTab="home"
                      onTabChange={(tab) => console.log('Tab changed:', tab)}
                      drawerItems={[
                        { id: 'settings', label: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏', icon: ({ className }) => <span className={className}>‚öôÔ∏è</span> },
                        { id: 'help', label: '–ü–æ–º–æ—â—å', icon: ({ className }) => <span className={className}>‚ùì</span> },
                        { id: 'about', label: '–û –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏', icon: ({ className }) => <span className={className}>‚ÑπÔ∏è</span> },
                      ]}
                      onDrawerItemClick={(item) => console.log('Drawer item:', item)}

                    />
                    
                    <div className="p-4 pt-16 pb-20">
                      <p className="text-center text-muted-foreground">
                        –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –º–æ–±–∏–ª—å–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ —Å –Ω–∏–∂–Ω–µ–π –ø–∞–Ω–µ–ª—å—é –∏ –±–æ–∫–æ–≤—ã–º –º–µ–Ω—é
                      </p>
                    </div>
                  </div>
                </div>
              </CardRevealAnimation>
            </div>
          )}

          {/* –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å */}
          {activeTab === 'accessibility' && (
            <div className="space-y-6">
              <CardRevealAnimation>
                <div className="p-6 bg-card border rounded-lg">
                  <h2 className="text-xl font-semibold mb-4">‚ôø –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã</h2>
                  
                  <div className="grid gap-4 md:grid-cols-2">
                    <div className="space-y-4">
                      <AccessibleButton
                        variant="default"
                        onClick={() => setShowToast(true)}
                        aria-label="–ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"
                      >
                        –ü–æ–∫–∞–∑–∞—Ç—å Toast
                      </AccessibleButton>
                      
                      <AccessibleInput
                        label="–î–æ—Å—Ç—É–ø–Ω–æ–µ –ø–æ–ª–µ –≤–≤–æ–¥–∞"
                        placeholder="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç..."
                        helpText="–≠—Ç–æ –ø–æ–ª–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Å–∫—Ä–∏–Ω—Ä–∏–¥–µ—Ä—ã"
                      />
                      
                      <AccessibleSelect
                        label="–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é"
                        options={[
                          { value: 'option1', label: '–û–ø—Ü–∏—è 1' },
                          { value: 'option2', label: '–û–ø—Ü–∏—è 2' },
                          { value: 'option3', label: '–û–ø—Ü–∏—è 3' },
                        ]}
                        helpText="–ù–∞–≤–∏–≥–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è"
                      />
                    </div>
                    
                    <div className="space-y-4">
                      <AccessibleCheckbox
                        label="–°–æ–≥–ª–∞—Å–∏–µ —Å —É—Å–ª–æ–≤–∏—è–º–∏"
                        helpText="–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ"
                        required
                      />
                      
                      <div className="p-4 bg-muted rounded-lg">
                        <h3 className="font-medium mb-2">–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏:</h3>
                        <ul className="text-sm text-muted-foreground space-y-1">
                          <li>‚Ä¢ ARIA-–∞—Ç—Ä–∏–±—É—Ç—ã –¥–ª—è —Å–∫—Ä–∏–Ω—Ä–∏–¥–µ—Ä–æ–≤</li>
                          <li>‚Ä¢ –ö–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç—å 4.5:1 –∏ –≤—ã—à–µ</li>
                          <li>‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π</li>
                          <li>‚Ä¢ –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –¥–æ 200%</li>
                          <li>‚Ä¢ –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∞—è —Ä–∞–∑–º–µ—Ç–∫–∞ HTML</li>
                        </ul>
                      </div>
                    </div>
                  </div>
                </div>
              </CardRevealAnimation>
            </div>
          )}

          {/* –ê–Ω–∏–º–∞—Ü–∏–∏ */}
          {activeTab === 'animations' && (
            <div className="space-y-6">
              <CardRevealAnimation delay={100}>
                <div className="p-6 bg-card border rounded-lg">
                  <h2 className="text-xl font-semibold mb-4">üé¨ –ü–ª–∞–≤–Ω—ã–µ –∞–Ω–∏–º–∞—Ü–∏–∏</h2>
                  
                  <div className="grid gap-6 md:grid-cols-2">
                    <div className="space-y-4">
                      <h3 className="font-medium">–ê–Ω–∏–º–∞—Ü–∏–∏ –≤—Ö–æ–¥–∞</h3>
                      
                      <div className="space-y-2">
                        <SmoothAnimation type="fadeIn" config={{ duration: 500 }}>
                          <div className="p-3 bg-primary/10 rounded-lg">
                            <span className="text-sm">Fade In –∞–Ω–∏–º–∞—Ü–∏—è</span>
                          </div>
                        </SmoothAnimation>
                        
                        <SmoothAnimation type="slideUp" config={{ duration: 600, delay: 200 }}>
                          <div className="p-3 bg-secondary/10 rounded-lg">
                            <span className="text-sm">Slide Up –∞–Ω–∏–º–∞—Ü–∏—è</span>
                          </div>
                        </SmoothAnimation>
                        
                        <SmoothAnimation type="scaleIn" config={{ duration: 400, delay: 400 }}>
                          <div className="p-3 bg-accent/10 rounded-lg">
                            <span className="text-sm">Scale In –∞–Ω–∏–º–∞—Ü–∏—è</span>
                          </div>
                        </SmoothAnimation>
                      </div>
                    </div>
                    
                    <div className="space-y-4">
                      <h3 className="font-medium">–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã</h3>
                      
                      <ButtonPressAnimation>
                        <div className="p-4 bg-primary text-primary-foreground rounded-lg cursor-pointer text-center">
                          –ù–∞–∂–º–∏ –º–µ–Ω—è!
                        </div>
                      </ButtonPressAnimation>
                      
                      <RippleEffect>
                        <div className="p-4 bg-secondary text-secondary-foreground rounded-lg cursor-pointer text-center">
                          Ripple —ç—Ñ—Ñ–µ–∫—Ç
                        </div>
                      </RippleEffect>
                      
                      <div className="flex justify-center">
                        <LoadingAnimation />
                      </div>
                    </div>
                  </div>
                  
                  <div className="mt-6">
                    <h3 className="font-medium mb-3">–ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫</h3>
                    <AnimatedList stagger={150} animation="slideUp">
                      {demoItems.map((item) => (
                        <div key={item.id} className="p-3 bg-muted rounded-lg mb-2">
                          <h4 className="font-medium">{item.title}</h4>
                          <p className="text-sm text-muted-foreground">{item.description}</p>
                        </div>
                      ))}
                    </AnimatedList>
                  </div>
                  
                  <div className="mt-6 flex gap-2">
                    <AccessibleButton onClick={() => setShowModal(true)}>
                      –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
                    </AccessibleButton>
                  </div>
                </div>
              </CardRevealAnimation>
            </div>
          )}

          {/* –ú–æ–±–∏–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã */}
          {activeTab === 'mobile' && (
            <div className="space-y-6">
              <CardRevealAnimation>
                <div className="p-6 bg-card border rounded-lg">
                  <h2 className="text-xl font-semibold mb-4">üëÜ –ú–æ–±–∏–ª—å–Ω—ã–µ UI –ø–∞—Ç—Ç–µ—Ä–Ω—ã</h2>
                  
                  <div className="space-y-6">
                    {/* Pull to Refresh */}
                    <div>
                      <h3 className="font-medium mb-3">Pull to Refresh</h3>
                      <PullToRefresh onRefresh={handleRefresh} className="h-48 bg-muted rounded-lg">
                        <div className="p-4 text-center">
                          <p className="text-muted-foreground">
                            –ü–æ—Ç—è–Ω–∏—Ç–µ –≤–Ω–∏–∑ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
                          </p>
                        </div>
                      </PullToRefresh>
                    </div>
                    
                    {/* Swipe Actions */}
                    <div>
                      <h3 className="font-medium mb-3">Swipe Actions</h3>
                      <div className="space-y-2">
                        {demoItems.map((item) => (
                          <SwipeActions
                            key={item.id}
                            rightActions={swipeActions}
                          >
                            <div className="p-4 bg-background border rounded-lg">
                              <h4 className="font-medium">{item.title}</h4>
                              <p className="text-sm text-muted-foreground">{item.description}</p>
                              <p className="text-xs text-muted-foreground mt-2">
                                ‚Üê –°–≤–∞–π–ø–Ω–∏—Ç–µ –≤–ª–µ–≤–æ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π
                              </p>
                            </div>
                          </SwipeActions>
                        ))}
                      </div>
                    </div>
                    
                    {/* Long Press */}
                    <div>
                      <h3 className="font-medium mb-3">Long Press</h3>
                      <LongPress
                        onLongPress={() => {
                          triggerHaptic('heavy');
                          alert('Long press detected!');
                        }}
                      >
                        <div className="p-4 bg-primary/10 rounded-lg text-center cursor-pointer">
                          <p>–£–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏</p>
                          <p className="text-xs text-muted-foreground mt-1">
                            (—Å haptic feedback)
                          </p>
                        </div>
                      </LongPress>
                    </div>
                    
                    <div className="flex gap-2">
                      <AccessibleButton onClick={() => setShowBottomSheet(true)}>
                        –ü–æ–∫–∞–∑–∞—Ç—å Bottom Sheet
                      </AccessibleButton>
                    </div>
                  </div>
                </div>
              </CardRevealAnimation>
            </div>
          )}

          {/* –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ */}
          {activeTab === 'testing' && (
            <div className="space-y-6">
              <CardRevealAnimation>
                <div className="p-6 bg-card border rounded-lg">
                  <h2 className="text-xl font-semibold mb-4">üß™ –ö—Ä–æ—Å—Å-–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ</h2>
                  
                  {testResults.length > 0 && (
                    <CompatibilityStats results={testResults} className="mb-6" />
                  )}
                  
                  <AutoTester
                    tests={uiTests}
                    devices={deviceProfiles.slice(0, 5)} // –ü–µ—Ä–≤—ã–µ 5 —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –¥–ª—è –¥–µ–º–æ
                    onResults={setTestResults}
                  >
                    <div className="p-4 bg-gradient-to-r from-primary/10 to-accent/10 rounded-lg">
                      <h3 className="font-medium mb-2">–¢–µ—Å—Ç–∏—Ä—É–µ–º—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç</h3>
                      <p className="text-sm text-muted-foreground mb-4">
                        –≠—Ç–æ—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –±—É–¥–µ—Ç –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω –Ω–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö
                      </p>
                      
                      <div className="flex gap-2">
                        <AccessibleButton size="sm">–ö–Ω–æ–ø–∫–∞</AccessibleButton>
                        <AccessibleInput label="–ü–æ–ª–µ –≤–≤–æ–¥–∞" placeholder="–ü–æ–ª–µ –≤–≤–æ–¥–∞" className="flex-1" />
                      </div>
                    </div>
                  </AutoTester>
                </div>
              </CardRevealAnimation>
              
              {/* –°–∏–º—É–ª—è—Ç–æ—Ä —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ */}
              <CardRevealAnimation delay={200}>
                <div className="p-6 bg-card border rounded-lg">
                  <h3 className="font-medium mb-4">üì± –°–∏–º—É–ª—è—Ç–æ—Ä —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞</h3>
                  
                  <div className="mb-4">
                    <AccessibleSelect
                      label="–í—ã–±–µ—Ä–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ"
                      value={selectedDevice.id}
                      onChange={(e) => {
                        const device = deviceProfiles.find(d => d.id === e.target.value);
                        if (device) setSelectedDevice(device);
                      }}
                      options={deviceProfiles.map(device => ({
                        value: device.id,
                        label: device.name,
                      }))}
                    />
                  </div>
                  
                  <DeviceSimulator device={selectedDevice}>
                    <div className="p-4 space-y-4">
                      <h4 className="font-medium">–¢–µ—Å—Ç–æ–≤–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ</h4>
                      <AccessibleInput label="–ü–æ–∏—Å–∫" placeholder="–ü–æ–∏—Å–∫..." />
                      <div className="grid grid-cols-2 gap-2">
                        <AccessibleButton size="sm">–ö–Ω–æ–ø–∫–∞ 1</AccessibleButton>
                        <AccessibleButton size="sm" variant="outline">–ö–Ω–æ–ø–∫–∞ 2</AccessibleButton>
                      </div>
                      <div className="p-3 bg-muted rounded-lg">
                        <p className="text-sm">–ö–æ–Ω—Ç–µ–Ω—Ç –∞–¥–∞–ø—Ç–∏—Ä—É–µ—Ç—Å—è –ø–æ–¥ —Ä–∞–∑–º–µ—Ä —ç–∫—Ä–∞–Ω–∞</p>
                      </div>
                    </div>
                  </DeviceSimulator>
                </div>
              </CardRevealAnimation>
            </div>
          )}
        </AnimatedTransition>
      </div>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ */}
      <ModalAnimation show={showModal} onClose={() => setShowModal(false)}>
        <div className="fixed inset-0 bg-black/50 flex items-center justify-center p-4 z-50">
          <div className="bg-background rounded-lg p-6 max-w-md w-full">
            <h3 className="font-semibold mb-4">–ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ</h3>
            <p className="text-muted-foreground mb-4">
              –≠—Ç–æ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –ø–ª–∞–≤–Ω–æ–π –∞–Ω–∏–º–∞—Ü–∏–µ–π –ø–æ—è–≤–ª–µ–Ω–∏—è –∏ –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è.
            </p>
            <div className="flex gap-2 justify-end">
              <AccessibleButton variant="outline" onClick={() => setShowModal(false)}>
                –û—Ç–º–µ–Ω–∞
              </AccessibleButton>
              <AccessibleButton onClick={() => setShowModal(false)}>
                –û–ö
              </AccessibleButton>
            </div>
          </div>
        </div>
      </ModalAnimation>

      {/* Bottom Sheet */}
      <BottomSheet
        isOpen={showBottomSheet}
        onClose={() => setShowBottomSheet(false)}
        snapPoints={[0.3, 0.6, 0.9]}
      >
        <div className="space-y-4">
          <h3 className="font-semibold">Bottom Sheet</h3>
          <p className="text-muted-foreground">
            –≠—Ç–æ –≤—ã–¥–≤–∏–∂–Ω–∞—è –ø–∞–Ω–µ–ª—å —Å–Ω–∏–∑—É —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∂–µ—Å—Ç–æ–≤ –∏ —Ç–æ—á–µ–∫ –ø—Ä–∏–≤—è–∑–∫–∏.
          </p>
          
          <div className="space-y-2">
            {demoItems.map((item) => (
              <div key={item.id} className="p-3 bg-muted rounded-lg">
                <h4 className="font-medium">{item.title}</h4>
                <p className="text-sm text-muted-foreground">{item.description}</p>
              </div>
            ))}
          </div>
          
          <AccessibleButton 
            onClick={() => setShowBottomSheet(false)}
            className="w-full"
          >
            –ó–∞–∫—Ä—ã—Ç—å
          </AccessibleButton>
        </div>
      </BottomSheet>

      {/* Toast —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ */}
      {showToast && (
        <AccessibleToast
          title="–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"
          message="–≠—Ç–æ –¥–æ—Å—Ç—É–ø–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ!"
          type="success"
          onClose={() => setShowToast(false)}
        />
      )}
    </ResponsiveLayout>
  );
};

export default UIShowcase;