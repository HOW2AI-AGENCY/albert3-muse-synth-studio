import React, { ReactNode, useEffect, useState } from 'react';
import { cn } from '@/lib/utils';

declare global {
  interface Window {
    resizeTimeout?: ReturnType<typeof setTimeout>;
  }
}

interface ResponsiveLayoutProps {
  children: ReactNode;
  className?: string;
  enableSafeArea?: boolean;
  maxWidth?: 'xs' | 'sm' | 'md' | 'lg' | 'xl' | '2xl' | '3xl' | '4xl' | '5xl' | '6xl' | '7xl' | 'full';
  padding?: 'none' | 'sm' | 'md' | 'lg' | 'xl';
  centerContent?: boolean;
}

interface ViewportInfo {
  width: number;
  height: number;
  breakpoint: 'xs' | 'sm' | 'md' | 'lg' | 'xl' | '2xl' | '3xl' | '4k';
  orientation: 'portrait' | 'landscape';
  isTouch: boolean;
  pixelRatio: number;
}

/**
 * üéØ ResponsiveLayout - –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –º–∞–∫–µ—Ç–∞ —Å mobile-first –ø–æ–¥—Ö–æ–¥–æ–º
 * 
 * –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
 * - Mobile-first –¥–∏–∑–∞–π–Ω —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –≤—Å–µ—Ö —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –æ—Ç 320px –¥–æ 4K
 * - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∏ –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏
 * - –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö –∑–æ–Ω –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
 * - –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è –≤—ã—Å–æ–∫–∏—Ö DPI —ç–∫—Ä–∞–Ω–æ–≤
 * - –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –∏ –æ—Ç—Å—Ç—É–ø—ã
 */
export const ResponsiveLayout: React.FC<ResponsiveLayoutProps> = ({
  children,
  className,
  enableSafeArea = true,
  maxWidth = 'full',
  padding = 'md',
  centerContent = false,
}) => {
  const [viewport, setViewport] = useState<ViewportInfo>({
    width: typeof window !== 'undefined' ? window.innerWidth : 1024,
    height: typeof window !== 'undefined' ? window.innerHeight : 768,
    breakpoint: 'lg',
    orientation: 'landscape',
    isTouch: false,
    pixelRatio: typeof window !== 'undefined' ? window.devicePixelRatio : 1,
  });

  // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –±—Ä–µ–π–∫–ø–æ–∏–Ω—Ç–∞
  const getBreakpoint = (width: number): ViewportInfo['breakpoint'] => {
    if (width >= 2560) return '4k';
    if (width >= 1920) return '3xl';
    if (width >= 1536) return '2xl';
    if (width >= 1280) return 'xl';
    if (width >= 1024) return 'lg';
    if (width >= 768) return 'md';
    if (width >= 640) return 'sm';
    return 'xs';
  };

  // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏
  const getOrientation = (width: number, height: number): 'portrait' | 'landscape' => {
    return width > height ? 'landscape' : 'portrait';
  };

  // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ touch
  const getTouchSupport = (): boolean => {
    return typeof window !== 'undefined' && 
           ('ontouchstart' in window || navigator.maxTouchPoints > 0);
  };

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ viewport
  const updateViewport = () => {
    if (typeof window === 'undefined') return;

    const width = window.innerWidth;
    const height = window.innerHeight;
    
    setViewport({
      width,
      height,
      breakpoint: getBreakpoint(width),
      orientation: getOrientation(width, height),
      isTouch: getTouchSupport(),
      pixelRatio: window.devicePixelRatio,
    });
  };

  useEffect(() => {
    updateViewport();

    const handleResize = () => {
      // –î–µ–±–∞—É–Ω—Å –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
      if (window.resizeTimeout) {
        clearTimeout(window.resizeTimeout);
      }
      window.resizeTimeout = setTimeout(updateViewport, 100);
    };

    const handleOrientationChange = () => {
      // –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–æ–≤ –ø–æ—Å–ª–µ –ø–æ–≤–æ—Ä–æ—Ç–∞
      setTimeout(updateViewport, 200);
    };

    window.addEventListener('resize', handleResize);
    window.addEventListener('orientationchange', handleOrientationChange);

    return () => {
      window.removeEventListener('resize', handleResize);
      window.removeEventListener('orientationchange', handleOrientationChange);
      if (window.resizeTimeout) {
        clearTimeout(window.resizeTimeout);
      }
    };
  }, []);

  // –ö–ª–∞—Å—Å—ã –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —à–∏—Ä–∏–Ω—ã
  const maxWidthClasses = {
    xs: 'max-w-container-xs',
    sm: 'max-w-container-sm',
    md: 'max-w-container-md',
    lg: 'max-w-container-lg',
    xl: 'max-w-container-xl',
    '2xl': 'max-w-container-2xl',
    '3xl': 'max-w-container-3xl',
    '4xl': 'max-w-container-4xl',
    '5xl': 'max-w-container-5xl',
    '6xl': 'max-w-container-6xl',
    '7xl': 'max-w-container-7xl',
    full: 'max-w-full',
  };

  // –ö–ª–∞—Å—Å—ã –¥–ª—è –æ—Ç—Å—Ç—É–ø–æ–≤
  const paddingClasses = {
    none: '',
    sm: 'px-4 py-2',
    md: 'px-container py-4',
    lg: 'px-6 py-6 md:px-8 md:py-8',
    xl: 'px-8 py-8 md:px-12 md:py-12',
  };

  return (
    <div
      className={cn(
        // –ë–∞–∑–æ–≤—ã–µ —Å—Ç–∏–ª–∏
        'w-full min-h-screen',
        
        // –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∑–æ–Ω—ã –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        enableSafeArea && 'safe-area',
        
        // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —à–∏—Ä–∏–Ω–∞
        maxWidthClasses[maxWidth],
        
        // –û—Ç—Å—Ç—É–ø—ã
        paddingClasses[padding],
        
        // –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        centerContent && 'mx-auto',
        
        // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è touch —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        viewport.isTouch && 'touch-manipulation',
        
        // –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ —Å—Ç–∏–ª–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –±—Ä–µ–π–∫–ø–æ–∏–Ω—Ç–æ–≤
        {
          // –ú–æ–±–∏–ª—å–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ (320px - 767px)
          'text-sm leading-relaxed': viewport.breakpoint === 'xs',
          
          // –ü–ª–∞–Ω—à–µ—Ç—ã (768px - 1023px)
          'text-base leading-normal': viewport.breakpoint === 'md',
          
          // –î–µ—Å–∫—Ç–æ–ø (1024px+)
          'text-lg leading-snug': viewport.breakpoint === 'lg' || viewport.breakpoint === 'xl',
          
          // –ë–æ–ª—å—à–∏–µ —ç–∫—Ä–∞–Ω—ã (1920px+)
          'text-xl leading-tight': viewport.breakpoint === '3xl' || viewport.breakpoint === '4k',
        },
        
        className
      )}
      data-viewport-width={viewport.width}
      data-viewport-height={viewport.height}
      data-breakpoint={viewport.breakpoint}
      data-orientation={viewport.orientation}
      data-touch={viewport.isTouch}
      data-pixel-ratio={viewport.pixelRatio}
    >
      {children}
    </div>
  );
};

/**
 * üì± MobileContainer - –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
 */
interface MobileContainerProps {
  children: ReactNode;
  className?: string;
  fullHeight?: boolean;
  scrollable?: boolean;
}

export const MobileContainer: React.FC<MobileContainerProps> = ({
  children,
  className,
  fullHeight = false,
  scrollable = true,
}) => {
  return (
    <div
      className={cn(
        // –ë–∞–∑–æ–≤—ã–µ —Å—Ç–∏–ª–∏ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö
        'w-full',
        fullHeight && 'h-screen',
        
        // –ü—Ä–æ–∫—Ä—É—Ç–∫–∞
        scrollable && 'overflow-y-auto hide-scrollbar',
        
        // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö
        '-webkit-overflow-scrolling-touch',
        'overscroll-behavior-y-contain',
        
        // –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∑–æ–Ω—ã
        'safe-area',
        
        className
      )}
    >
      {children}
    </div>
  );
};

/**
 * üñ•Ô∏è DesktopContainer - –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –¥–µ—Å–∫—Ç–æ–ø–∞
 */
interface DesktopContainerProps {
  children: ReactNode;
  className?: string;
  sidebar?: ReactNode;
  sidebarWidth?: 'sm' | 'md' | 'lg';
}

export const DesktopContainer: React.FC<DesktopContainerProps> = ({
  children,
  className,
  sidebar,
  sidebarWidth = 'md',
}) => {
  const sidebarWidths = {
    sm: 'w-64',
    md: 'w-80',
    lg: 'w-96',
  };

  return (
    <div className={cn('flex h-screen', className)}>
      {sidebar && (
        <aside className={cn(
          'hidden lg:flex flex-col',
          sidebarWidths[sidebarWidth],
          'border-r border-outline-variant',
          'bg-surface'
        )}>
          {sidebar}
        </aside>
      )}
      
      <main className="flex-1 overflow-hidden">
        {children}
      </main>
    </div>
  );
};

/**
 * üîÑ AdaptiveGrid - –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è —Å–µ—Ç–∫–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º –∫–æ–ª–æ–Ω–æ–∫
 */
interface AdaptiveGridProps {
  children: ReactNode;
  className?: string;
  minItemWidth?: number;
  gap?: 'sm' | 'md' | 'lg' | 'xl';
  autoFit?: boolean;
}

export const AdaptiveGrid: React.FC<AdaptiveGridProps> = ({
  children,
  className,
  minItemWidth = 280,
  gap = 'md',
  autoFit = true,
}) => {
  const gapClasses = {
    sm: 'gap-2',
    md: 'gap-4',
    lg: 'gap-6',
    xl: 'gap-8',
  };

  return (
    <div
      className={cn(
        'grid w-full',
        gapClasses[gap],
        className
      )}
      style={{
        gridTemplateColumns: autoFit 
          ? `repeat(auto-fit, minmax(${minItemWidth}px, 1fr))`
          : `repeat(auto-fill, minmax(${minItemWidth}px, 1fr))`,
      }}
    >
      {children}
    </div>
  );
};

/**
 * üìê FlexContainer - –ì–∏–±–∫–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º
 */
interface FlexContainerProps {
  children: ReactNode;
  className?: string;
  direction?: 'row' | 'column' | 'responsive';
  align?: 'start' | 'center' | 'end' | 'stretch';
  justify?: 'start' | 'center' | 'end' | 'between' | 'around' | 'evenly';
  wrap?: boolean;
  gap?: 'sm' | 'md' | 'lg' | 'xl';
}

export const FlexContainer: React.FC<FlexContainerProps> = ({
  children,
  className,
  direction = 'row',
  align = 'start',
  justify = 'start',
  wrap = false,
  gap = 'md',
}) => {
  const directionClasses = {
    row: 'flex-row',
    column: 'flex-col',
    responsive: 'flex-col md:flex-row',
  };

  const alignClasses = {
    start: 'items-start',
    center: 'items-center',
    end: 'items-end',
    stretch: 'items-stretch',
  };

  const justifyClasses = {
    start: 'justify-start',
    center: 'justify-center',
    end: 'justify-end',
    between: 'justify-between',
    around: 'justify-around',
    evenly: 'justify-evenly',
  };

  const gapClasses = {
    sm: 'gap-2',
    md: 'gap-4',
    lg: 'gap-6',
    xl: 'gap-8',
  };

  return (
    <div
      className={cn(
        'flex',
        directionClasses[direction],
        alignClasses[align],
        justifyClasses[justify],
        wrap && 'flex-wrap',
        gapClasses[gap],
        className
      )}
    >
      {children}
    </div>
  );
};

// –•—É–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ viewport
export const useViewport = () => {
  const [viewport, setViewport] = useState<ViewportInfo>({
    width: typeof window !== 'undefined' ? window.innerWidth : 1024,
    height: typeof window !== 'undefined' ? window.innerHeight : 768,
    breakpoint: 'lg',
    orientation: 'landscape',
    isTouch: false,
    pixelRatio: typeof window !== 'undefined' ? window.devicePixelRatio : 1,
  });

  useEffect(() => {
    const updateViewport = () => {
      if (typeof window === 'undefined') return;

      const width = window.innerWidth;
      const height = window.innerHeight;
      
      setViewport({
        width,
        height,
        breakpoint: width >= 2560 ? '4k' : 
                   width >= 1920 ? '3xl' :
                   width >= 1536 ? '2xl' :
                   width >= 1280 ? 'xl' :
                   width >= 1024 ? 'lg' :
                   width >= 768 ? 'md' :
                   width >= 640 ? 'sm' : 'xs',
        orientation: width > height ? 'landscape' : 'portrait',
        isTouch: 'ontouchstart' in window || navigator.maxTouchPoints > 0,
        pixelRatio: window.devicePixelRatio,
      });
    };

    updateViewport();

    const handleResize = () => {
      if (window.resizeTimeout) {
        clearTimeout(window.resizeTimeout);
      }
      window.resizeTimeout = setTimeout(updateViewport, 100);
    };

    window.addEventListener('resize', handleResize);
    window.addEventListener('orientationchange', () => setTimeout(updateViewport, 200));

    return () => {
      window.removeEventListener('resize', handleResize);
      if (window.resizeTimeout) {
        clearTimeout(window.resizeTimeout);
      }
    };
  }, []);

  return viewport;
};

export default ResponsiveLayout;