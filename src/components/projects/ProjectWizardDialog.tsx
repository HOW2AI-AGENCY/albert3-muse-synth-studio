/**
 * Project Wizard Dialog
 * AI-assisted project creation with multi-step form
 */

import { useState, useCallback } from 'react';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Card, CardContent } from '@/components/ui/card';
import { Loader2, Sparkles, RefreshCw, Check } from 'lucide-react';
import { supabase } from '@/integrations/supabase/client';
import { useToast } from '@/hooks/use-toast';
import { logger } from '@/utils/logger';
import type { MusicProject, ProjectType } from '@/types/project.types';

interface ProjectWizardDialogProps {
  open: boolean;
  onOpenChange: (open: boolean) => void;
  onProjectCreated?: (project: MusicProject) => void;
}

interface ProjectDraft {
  name: string;
  description: string;
  project_type: ProjectType;
  genre?: string;
  mood?: string;
  style_tags?: string[];
  concept_description?: string;
  story_theme?: string;
  planned_tracks?: Array<{ order: number; title: string; notes?: string }>;
}

export const ProjectWizardDialog = ({ open, onOpenChange, onProjectCreated }: ProjectWizardDialogProps) => {
  const { toast } = useToast();
  const [step, setStep] = useState<'input' | 'draft' | 'save'>('input');
  const [isGenerating, setIsGenerating] = useState(false);
  const [isSaving, setIsSaving] = useState(false);
  
  // Input step
  const [prompt, setPrompt] = useState('');
  const [projectType, setProjectType] = useState<ProjectType>('album');
  const [trackCount, setTrackCount] = useState(10);
  
  // Draft step
  const [draft, setDraft] = useState<ProjectDraft | null>(null);

  const handleGenerateDraft = useCallback(async () => {
    if (!prompt.trim()) {
      toast({
        title: '–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ',
        description: '–û–ø–∏—à–∏—Ç–µ –≤–∞—à –º—É–∑—ã–∫–∞–ª—å–Ω—ã–π –ø—Ä–æ–µ–∫—Ç',
        variant: 'destructive',
      });
      return;
    }

    setIsGenerating(true);
    
    try {
      logger.info('Generating project draft', 'ProjectWizard', { prompt, projectType, trackCount });
      
      const { data, error } = await supabase.functions.invoke('ai-project-wizard', {
        body: {
          prompt,
          mode: 'draft',
          projectType,
          trackCount,
        },
      });

      if (error) {
        if (error.message?.includes('429')) {
          throw new Error('–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É.');
        }
        if (error.message?.includes('402')) {
          throw new Error('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –∫—Ä–µ–¥–∏—Ç—ã –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.');
        }
        throw error;
      }

      if (data?.draft) {
        setDraft(data.draft);
        setStep('draft');
        toast({
          title: '‚ú® –ß–µ—Ä–Ω–æ–≤–∏–∫ –≥–æ—Ç–æ–≤!',
          description: '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ –¥–µ—Ç–∞–ª–∏',
        });
      }
    } catch (err) {
      const error = err as Error;
      logger.error('Failed to generate draft', error, 'ProjectWizard');
      toast({
        title: '–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏',
        description: error.message || '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —á–µ—Ä–Ω–æ–≤–∏–∫',
        variant: 'destructive',
      });
    } finally {
      setIsGenerating(false);
    }
  }, [prompt, projectType, trackCount, toast]);

  const handleSaveProject = useCallback(async () => {
    if (!draft) return;

    setIsSaving(true);
    
    try {
      const { data: user } = await supabase.auth.getUser();
      if (!user?.user) throw new Error('Not authenticated');

      const { data: project, error } = await supabase
        .from('music_projects')
        .insert({
          user_id: user.user.id,
          name: draft.name,
          description: draft.description,
          project_type: draft.project_type,
          genre: draft.genre,
          mood: draft.mood,
          style_tags: draft.style_tags,
          concept_description: draft.concept_description,
          story_theme: draft.story_theme,
          planned_tracks: draft.planned_tracks || [],
        })
        .select()
        .single();

      if (error) throw error;

      toast({
        title: 'üéâ –ü—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω!',
        description: `"${draft.name}" –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≤–∞—à–∏ –ø—Ä–æ–µ–∫—Ç—ã`,
      });

      onProjectCreated?.(project as MusicProject);
      onOpenChange(false);
      
      // Reset
      setStep('input');
      setPrompt('');
      setDraft(null);
    } catch (err) {
      const error = err as Error;
      logger.error('Failed to save project', error, 'ProjectWizard');
      toast({
        title: '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è',
        description: error.message || '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ–µ–∫—Ç',
        variant: 'destructive',
      });
    } finally {
      setIsSaving(false);
    }
  }, [draft, toast, onProjectCreated, onOpenChange]);

  const handleUseWithoutSaving = useCallback(() => {
    if (!draft) return;
    
    // Convert draft to MusicProject format for compatibility
    const tempProject: Partial<MusicProject> = {
      id: 'temp-' + Date.now(),
      name: draft.name,
      description: draft.description,
      project_type: draft.project_type,
      genre: draft.genre,
      mood: draft.mood,
      style_tags: draft.style_tags,
      concept_description: draft.concept_description,
      story_theme: draft.story_theme,
    };
    
    onProjectCreated?.(tempProject as MusicProject);
    onOpenChange(false);
    
    toast({
      title: '–ü—Ä–æ–µ–∫—Ç –ø—Ä–∏–º–µ–Ω—ë–Ω',
      description: '–ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è',
    });
    
    // Reset
    setStep('input');
    setPrompt('');
    setDraft(null);
  }, [draft, onProjectCreated, onOpenChange, toast]);

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="max-w-2xl max-h-[90vh] overflow-y-auto">
        <DialogHeader>
          <DialogTitle>
            <Sparkles className="w-5 h-5 inline mr-2" />
            AI –ú–∞—Å—Ç–µ—Ä –ü—Ä–æ–µ–∫—Ç–æ–≤
          </DialogTitle>
          <DialogDescription>
            –°–æ–∑–¥–∞–π—Ç–µ –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –º—É–∑—ã–∫–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ —Å –ø–æ–º–æ—â—å—é AI
          </DialogDescription>
        </DialogHeader>

        {/* Step 1: Input */}
        {step === 'input' && (
          <div className="space-y-4 pt-4">
            <div className="space-y-2">
              <Label>–û–ø–∏—à–∏—Ç–µ –≤–∞—à –ø—Ä–æ–µ–∫—Ç</Label>
              <Textarea
                placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ö–æ–Ω—Ü–µ–ø—Ç—É–∞–ª—å–Ω—ã–π –∞–ª—å–±–æ–º –æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–∏ –≤–æ –≤—Ä–µ–º–µ–Ω–∏, —Å–º–µ—Å—å synthwave –∏ ambient..."
                value={prompt}
                onChange={(e) => setPrompt(e.target.value)}
                rows={6}
                className="resize-none"
              />
            </div>

            <div className="grid grid-cols-2 gap-4">
              <div className="space-y-2">
                <Label>–¢–∏–ø –ø—Ä–æ–µ–∫—Ç–∞</Label>
                <Select value={projectType} onValueChange={(v) => setProjectType(v as ProjectType)}>
                  <SelectTrigger>
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="single">–°–∏–Ω–≥–ª</SelectItem>
                    <SelectItem value="ep">EP</SelectItem>
                    <SelectItem value="album">–ê–ª—å–±–æ–º</SelectItem>
                    <SelectItem value="soundtrack">–°–∞—É–Ω–¥—Ç—Ä–µ–∫</SelectItem>
                    <SelectItem value="instrumental">–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–ª</SelectItem>
                    <SelectItem value="custom">–î—Ä—É–≥–æ–µ</SelectItem>
                  </SelectContent>
                </Select>
              </div>

              <div className="space-y-2">
                <Label>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–µ–∫–æ–≤</Label>
                <Input
                  type="number"
                  min={1}
                  max={30}
                  value={trackCount}
                  onChange={(e) => setTrackCount(parseInt(e.target.value) || 1)}
                />
              </div>
            </div>

            <div className="flex gap-2">
              <Button
                onClick={handleGenerateDraft}
                disabled={isGenerating || !prompt.trim()}
                className="flex-1"
              >
                {isGenerating ? (
                  <>
                    <Loader2 className="w-4 h-4 mr-2 animate-spin" />
                    –ì–µ–Ω–µ—Ä–∞—Ü–∏—è...
                  </>
                ) : (
                  <>
                    <Sparkles className="w-4 h-4 mr-2" />
                    –°–æ–∑–¥–∞—Ç—å —á–µ—Ä–Ω–æ–≤–∏–∫
                  </>
                )}
              </Button>
            </div>
          </div>
        )}

        {/* Step 2: Draft */}
        {step === 'draft' && draft && (
          <div className="space-y-4 pt-4">
            <Card>
              <CardContent className="pt-6 space-y-4">
                <div className="space-y-2">
                  <Label>–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞</Label>
                  <Input
                    value={draft.name}
                    onChange={(e) => setDraft({ ...draft, name: e.target.value })}
                  />
                </div>

                <div className="space-y-2">
                  <Label>–û–ø–∏—Å–∞–Ω–∏–µ</Label>
                  <Textarea
                    value={draft.description}
                    onChange={(e) => setDraft({ ...draft, description: e.target.value })}
                    rows={3}
                  />
                </div>

                <div className="grid grid-cols-2 gap-4">
                  <div className="space-y-2">
                    <Label>–ñ–∞–Ω—Ä</Label>
                    <Input
                      value={draft.genre || ''}
                      onChange={(e) => setDraft({ ...draft, genre: e.target.value })}
                    />
                  </div>

                  <div className="space-y-2">
                    <Label>–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ</Label>
                    <Input
                      value={draft.mood || ''}
                      onChange={(e) => setDraft({ ...draft, mood: e.target.value })}
                    />
                  </div>
                </div>

                {draft.style_tags && draft.style_tags.length > 0 && (
                  <div className="space-y-2">
                    <Label>–°—Ç–∏–ª–µ–≤—ã–µ —Ç–µ–≥–∏</Label>
                    <div className="flex flex-wrap gap-2">
                      {draft.style_tags.map((tag, i) => (
                        <span key={i} className="px-2 py-1 bg-primary/10 text-primary rounded-md text-sm">
                          {tag}
                        </span>
                      ))}
                    </div>
                  </div>
                )}

                {draft.planned_tracks && draft.planned_tracks.length > 0 && (
                  <div className="space-y-2">
                    <Label>–¢—Ä–µ–∫–ª–∏—Å—Ç ({draft.planned_tracks.length})</Label>
                    <div className="space-y-1 max-h-40 overflow-y-auto">
                      {draft.planned_tracks.map((track, i) => (
                        <div key={i} className="text-sm p-2 bg-muted rounded">
                          {track.order}. {track.title}
                          {track.notes && <span className="text-muted-foreground ml-2">‚Äî {track.notes}</span>}
                        </div>
                      ))}
                    </div>
                  </div>
                )}
              </CardContent>
            </Card>

            <div className="flex gap-2">
              <Button
                variant="outline"
                onClick={() => {
                  setStep('input');
                  setDraft(null);
                }}
              >
                <RefreshCw className="w-4 h-4 mr-2" />
                –ó–∞–Ω–æ–≤–æ
              </Button>
              
              <Button
                variant="outline"
                onClick={handleUseWithoutSaving}
                className="flex-1"
              >
                –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
              </Button>
              
              <Button
                onClick={handleSaveProject}
                disabled={isSaving}
                className="flex-1"
              >
                {isSaving ? (
                  <>
                    <Loader2 className="w-4 h-4 mr-2 animate-spin" />
                    –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...
                  </>
                ) : (
                  <>
                    <Check className="w-4 h-4 mr-2" />
                    –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ–µ–∫—Ç
                  </>
                )}
              </Button>
            </div>
          </div>
        )}
      </DialogContent>
    </Dialog>
  );
};
