import { create } from 'zustand';
import { ApiService, GenerateMusicRequest } from '@/services/api.service';
import { supabase } from '@/integrations/supabase/client';
import { logError } from '@/utils/logger';
import type { RealtimeChannel } from '@supabase/supabase-js';

type ToastFunction = (options: { title: string; description: string; variant?: 'destructive' | 'default' | null }) => void;

interface MusicGenerationState {
  isGenerating: boolean;
  isImproving: boolean;
  subscription: RealtimeChannel | null;
  generateMusic: (options: GenerateMusicRequest, toast: ToastFunction, onSuccess?: () => void) => Promise<boolean>;
  improvePrompt: (rawPrompt: string | undefined, toast: ToastFunction) => Promise<string | null>;
  cleanupSubscription: () => void;
}

export const useMusicGenerationStore = create<MusicGenerationState>((set, get) => ({
  isGenerating: false,
  isImproving: false,
  subscription: null,

  cleanupSubscription: () => {
    get().subscription?.unsubscribe();
    set({ subscription: null });
  },

  improvePrompt: async (rawPrompt, toast) => {
    const promptToImprove = typeof rawPrompt === 'string' ? rawPrompt.trim() : '';
    if (!promptToImprove) {
      toast({
        title: '–û—à–∏–±–∫–∞',
        description: '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º—É–∑—ã–∫–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è.',
        variant: 'destructive',
      });
      return null;
    }

    if (get().isImproving) return null;

    set({ isImproving: true });
    try {
      const response = await ApiService.improvePrompt({ prompt: promptToImprove });
      toast({
        title: '‚ú® –ü—Ä–æ–º–ø—Ç —É–ª—É—á—à–µ–Ω!',
        description: '–í–∞—à–µ –æ–ø–∏—Å–∞–Ω–∏–µ –±—ã–ª–æ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Å –ø–æ–º–æ—â—å—é AI.',
      });
      return response.improvedPrompt;
    } catch (error) {
      logError('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–ª—É—á—à–µ–Ω–∏–∏ –ø—Ä–æ–º–ø—Ç–∞', error as Error, 'useMusicGenerationStore');
      toast({
        title: '–û—à–∏–±–∫–∞',
        description: error instanceof Error ? error.message : '–ù–µ —É–¥–∞–ª–æ—Å—å —É–ª—É—á—à–∏—Ç—å –ø—Ä–æ–º–ø—Ç.',
        variant: 'destructive',
      });
      return null;
    } finally {
      set({ isImproving: false });
    }
  },

  generateMusic: async (options, toast, onSuccess) => {
    const { isGenerating, isImproving, cleanupSubscription } = get();
    const effectivePrompt = options.prompt?.trim() ?? '';

    if (!effectivePrompt) {
      toast({ title: '–û—à–∏–±–∫–∞', description: '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º—É–∑—ã–∫–∏', variant: 'destructive' });
      return false;
    }

    if (isGenerating || isImproving) {
      toast({ title: '–ü–æ–¥–æ–∂–¥–∏—Ç–µ', description: '–ü—Ä–µ–¥—ã–¥—É—â–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –µ—â—ë –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è', variant: 'destructive' });
      return false;
    }

    cleanupSubscription();
    set({ isGenerating: true });

    try {
      const { data: { user } } = await supabase.auth.getUser();
      if (!user) {
        toast({ title: '–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è', description: '–í–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º—É–∑—ã–∫–∏', variant: 'destructive' });
        return false;
      }

      const newTrack = await ApiService.createTrack(
        user.id,
        options.title || effectivePrompt.substring(0, 50) || 'Untitled Track',
        effectivePrompt,
        options.provider || 'suno',
        options.lyrics,
        options.hasVocals,
        options.styleTags
      );

      await ApiService.generateMusic({
        trackId: newTrack.id,
        userId: user.id,
        ...options,
      });

      toast({
        title: 'üéµ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–∞—á–∞–ª–∞—Å—å!',
        description: '–í–∞—à —Ç—Ä–µ–∫ —Å–æ–∑–¥–∞—ë—Ç—Å—è. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –æ–∫–æ–ª–æ –º–∏–Ω—É—Ç—ã...',
      });

      onSuccess?.();

      const subscription = supabase
        .channel(`track-status:${newTrack.id}`)
        .on('postgres_changes', { event: 'UPDATE', schema: 'public', table: 'tracks', filter: `id=eq.${newTrack.id}` },
          (payload) => {
            const updatedTrack = payload.new as { status: string; title: string; error_message?: string };
            if (updatedTrack.status === 'completed') {
              toast({
                title: '‚úÖ –¢—Ä–µ–∫ –≥–æ—Ç–æ–≤!',
                description: `–í–∞—à —Ç—Ä–µ–∫ "${updatedTrack.title}" —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω.`,
              });
              onSuccess?.();
              cleanupSubscription();
            } else if (updatedTrack.status === 'failed') {
              toast({
                title: '‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏',
                description: updatedTrack.error_message || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Ç—Ä–µ–∫–∞.',
                variant: 'destructive',
              });
              cleanupSubscription();
            }
          }
        )
        .subscribe();
      
      set({ subscription });
      return true;
    } catch (error) {
      logError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º—É–∑—ã–∫–∏', error as Error, 'useMusicGenerationStore');
      const rawMessage = error instanceof Error ? error.message : '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –º—É–∑—ã–∫—É.';
      const isNetworkError =
        typeof rawMessage === 'string' && (
          rawMessage.includes('Failed to fetch') ||
          rawMessage.includes('ERR_ABORTED') ||
          rawMessage.toLowerCase().includes('network')
        );

      toast({
        title: isNetworkError ? '–ü—Ä–æ–±–ª–µ–º–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è' : '–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏',
        description: isNetworkError
          ? '–ù–µ—Ç —Å–≤—è–∑–∏ —Å Supabase. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ VITE_SUPABASE_URL –∏ VITE_SUPABASE_PUBLISHABLE_KEY, –∞ —Ç–∞–∫–∂–µ —Å–µ—Ç–µ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏/–±–ª–æ–∫–∏—Ä–æ–≤—â–∏–∫–∏.'
          : rawMessage,
        variant: 'destructive',
      });
      cleanupSubscription();
      return false;
    } finally {
      set({ isGenerating: false });
    }
  },
}));
